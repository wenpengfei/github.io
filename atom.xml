<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜色镇歌</title>
  
  <subtitle>博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.catwen.cn/"/>
  <updated>2021-11-27T15:51:08.589Z</updated>
  <id>http://blog.catwen.cn/</id>
  
  <author>
    <name>文鹏飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Typescript 的最佳实践 2021 版</title>
    <link href="http://blog.catwen.cn/2021/11/27/typescript-best-practices-2021/"/>
    <id>http://blog.catwen.cn/2021/11/27/typescript-best-practices-2021/</id>
    <published>2021-11-27T20:35:42.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p>现在我们越来越多的项目都用上了 Typescript，也享受到了它带来的好处，为了更高效的使用它，我们可以遵循一些 <code>最佳实践</code>  ，以下的原则是我在使用并且推荐的</p><h2 id="使用正确的类型声明（避免使用-any-）"><a href="#使用正确的类型声明（避免使用-any-）" class="headerlink" title="使用正确的类型声明（避免使用 any ）"></a>使用正确的类型声明（避免使用 any ）</h2><p>类型声明是 Typescript 的一大优势，尤其是体现在代码编写阶段，因为 JavaScript 是在运行时定义类型的，Typescript 可以帮助你在运行之前就过滤掉一大部分类型引发的奇怪问题，当你知道你定义的变量是什么类型的时候不要使用 <code>any</code>，建议每次定义新变量的时候后都加上数据类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="built_in">string</span> = <span class="string">"hello"</span>;</span><br><span class="line">value: <span class="built_in">number</span> = <span class="number">50</span>;</span><br><span class="line">isCorrect: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="使用严格模式"><a href="#使用严格模式" class="headerlink" title="使用严格模式"></a>使用严格模式</h2><p><code>use strict</code> 是 JavaScript ES5 添加的功能，它就是字面的意思：<code>使用严格模式</code>，可以在 <code>tsconfig</code> 文件中找到相关的配置。</p><p><img src="/images/typescript-best-practices-2021/1.png" alt="Untitled"></p><p>这样可以防止你犯无意识或低级的错误，例如使用未声明的变量、不使用类型注释或尝试使用未来的保留关键字作为变量名等。<code>use strict</code> 通过<code>语法错误</code>的形式帮助您编写良好且安全的代码习惯。</p><h2 id="使用-let-代替-var"><a href="#使用-let-代替-var" class="headerlink" title="使用 let 代替 var"></a>使用 let 代替 var</h2><p><em>var</em> 是一位很好的老朋友，但是 <em>let</em> 和 <em>const</em> 在 <em>ES6</em> 中出现了，他们的出现是为了解决 <em>var</em> 的一些问题。</p><p><em>var</em> 既可以作用于<code>全局作用域</code>又可以作用于<code>局部作用域</code>。</p><ul><li>当 <em>var</em> 类型变量在函数/块之外定义时，它就成为全局范围的变量，该变量可用于脚本内的任何地方</li><li>当 <em>var</em> 在函数内部定义时变为局部作用域，它只能在该函数内部访问</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name= <span class="string">"John Doe"</span>; <span class="comment">// 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age= <span class="number">30</span>; <span class="comment">// 局部作用域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>var</em> 关键字有几个缺陷：可以重复声明，不声明也可以被调用，TS 也不会报错，会导致一些奇怪的问题。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"John Doe"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"Anne"</span>; <span class="comment">// 不会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为避免这种情况，应该改用 <em>let</em> 。 <em>let</em> 声明的是一个块级作用域变量，并且不能重新声明。但是你可以在不同的作用域中声明相同的变量名，每一个都被视为不同变量。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"John"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">"Anne"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// "Anne"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// "John"</span></span><br></pre></td></tr></table></figure><h2 id="常量使用-const-声明"><a href="#常量使用-const-声明" class="headerlink" title="常量使用 const 声明"></a>常量使用 <strong>const 声明</strong></h2><p><em>const</em> 和 <em>let 是一起新增的变量声明</em>。 <em>const</em> 也是块级作用域类型，同样的，也不能被重新声明。这些是 <em>let</em> 和 <em>const</em> 之间的相似之处。不同之处是 <em>const</em> 不能被重新赋值。所以当你声明一个常量时使用 <em>const</em>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"John"</span>;</span><br><span class="line">name = <span class="string">"Anne"</span>; <span class="comment">// error</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">31</span>; <span class="comment">//error</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：声明一个 <em>const</em> 对象时，不能重新对它赋值，但是可以修改它的的属性</p></blockquote><h2 id="固定长度的数组使用元组类型"><a href="#固定长度的数组使用元组类型" class="headerlink" title="固定长度的数组使用元组类型"></a>固定长度的数组使用元组类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> marks: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>你可以对 <code>marks</code> 数组添加任意数量的元素，只要都是 <code>number</code> 类型，TS 不会限制你。</p><p>但是，在数组长度为常量的情况下可能会导致严重的逻辑错误。为了避免这种错误，你可以使用元组类型来限制数组的长度和每一项的数据类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> marks:[<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// 含有 2 个 number 类型元素的数组类型</span></span><br><span class="line">marks = [<span class="number">10</span>, <span class="number">20</span>]; <span class="comment">// 成功</span></span><br><span class="line">marks = [<span class="number">1</span>]; <span class="comment">// 语法错误</span></span><br><span class="line">marks = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment">// 语法错误</span></span><br></pre></td></tr></table></figure><h2 id="使用类型别名"><a href="#使用类型别名" class="headerlink" title="使用类型别名"></a>使用类型别名</h2><p>假设有多个变量或对象拥有相同的数据结构类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> man: &#123;name: <span class="built_in">string</span>, age: <span class="built_in">number</span>&#125; = &#123;name = <span class="string">"john"</span>, age=<span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> woman: &#123;name: <span class="built_in">string</span>, age: <span class="built_in">number</span>&#125; = &#123;name = <span class="string">"Anne"</span>, age=<span class="number">32</span>&#125;;</span><br></pre></td></tr></table></figure><p>为了避免这种冗余的类型定义你可以使用<code>类型别名</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Details = &#123;name: <span class="built_in">string</span>, age: <span class="built_in">number</span>&#125;; <span class="comment">// 定义类型别名</span></span><br><span class="line"><span class="keyword">let</span> man: Details = &#123;name = <span class="string">"john"</span>, age=<span class="number">30</span>&#125;; <span class="comment">// 使用类型别名</span></span><br><span class="line"><span class="keyword">let</span> woman: Details = &#123;name = <span class="string">"Anne"</span>, age=<span class="number">32</span>&#125;;</span><br></pre></td></tr></table></figure><p>带来的额外好处就是代码的可读性更强，看起来更清晰</p><h2 id="any-和-unknown"><a href="#any-和-unknown" class="headerlink" title="any 和 unknown"></a>any 和 unknown</h2><p>表面上看来 <em>any</em>  和 <em>unknow</em> 没有什么区别，都是在我们不能确定数据类型的时候所使用的帮助类型，如果我们想快速的把 js 重构为 ts，两者均可，但是也有一些区别</p><p>任何值都可以标记为 <em>any</em>  或者 <em>unknown</em></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anyExample: <span class="built_in">any</span>; <span class="comment">// 定义一个 any 类型</span></span><br><span class="line"><span class="keyword">let</span> unknownExample: unknown; <span class="comment">// 定义一个 unknown 类型</span></span><br><span class="line">anyExample = <span class="number">123</span>; </span><br><span class="line">anyExample = <span class="string">"Hey"</span></span><br><span class="line">unknownExample = <span class="literal">false</span>;</span><br><span class="line">unknownExample = <span class="number">23.22</span>;</span><br></pre></td></tr></table></figure><p>对于标记 any 的值，你可以对它做任何事</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anyExample.you.made.this.code.chain(); <span class="comment">// success</span></span><br></pre></td></tr></table></figure><p>unknow 则不行，它是一种更安全的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unknownExample.trim(); <span class="comment">// 语法错误</span></span><br></pre></td></tr></table></figure><p>如果要使用 <em>unknow</em> 类型，你得把他放在一个条件判断语句中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> exampleUnkown == <span class="string">"string"</span>) &#123; <span class="comment">// 第一步，检查类型</span></span><br><span class="line">  exampleUnkown.trim(); <span class="comment">// 不会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对类成员使用访问修饰符"><a href="#对类成员使用访问修饰符" class="headerlink" title="对类成员使用访问修饰符"></a>对类成员使用访问修饰符</h2><p>TS 为 <em>class</em> 成员提供了<code>访问修饰符</code>，可以设置 <em>public</em>、<em>protected</em> 或者 <em>private</em> 属性，但 <em>class</em> 永远是 <code>public</code> 类型</p><ul><li>private：仅可以在内部访问</li><li>protected：内部或者子类可以访问</li><li>public：都可以访问</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> salary: <span class="built_in">number</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, salary: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> getSalary()&#123;</span><br><span class="line">    <span class="keyword">return</span> salary</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要访问 <code>salary</code> 属性，你必须调用 <code>getSalary</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Developer <span class="keyword">extends</span> Employee&#123;</span><br><span class="line">  viewDetails()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.salary); <span class="comment">// 错误: 属性 'salary' 是私有属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getSalary()); <span class="comment">// success</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过子类访问 <code>name</code> 属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Developer <span class="keyword">extends</span> Employee&#123;</span><br><span class="line">  viewDetails()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Lint-工具"><a href="#使用-Lint-工具" class="headerlink" title="使用 Lint 工具"></a>使用 Lint 工具</h2><p>每个人都有自己的开发风格和习惯，在团队项目中，多种代码风格是灾难性的，如果不想污染代码库，还是需要选择一个 Lint 工具，首选 <code>ESLint</code>，它与 JavaScript 和 Typescript 都兼容</p><h2 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h2><p>使用好的代码格式化程序可以使您的编码更高效、更简洁。根据我的个人经验，我更喜欢在 VS 代码中使用 <code>Prettier</code>。但是有很多代码格式化程序，选择取决于你使用的编辑器</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在我们越来越多的项目都用上了 Typescript，也享受到了它带来的好处，为了更高效的使用它，我们可以遵循一些 &lt;code&gt;最佳实践&lt;/code&gt;  ，以下的原则是我在使用并且推荐的&lt;/p&gt;
&lt;h2 id=&quot;使用正确的类型声明（避免使用-any-）&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5分钟教你看懂眼花缭乱的主板、CPU、显卡命名规则</title>
    <link href="http://blog.catwen.cn/2021/11/21/computer-hardware/"/>
    <id>http://blog.catwen.cn/2021/11/21/computer-hardware/</id>
    <published>2021-11-21T17:05:11.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h1><p>主板是影响电脑好坏的关键硬件之一，目前市场上主板的型号产品众多，主板一般考虑三大方面：<code>主板芯片等级</code>决定其性能的高低，<code>主板板型</code>决定其适用的机箱，而<code>主板接口</code>则关乎兼容性与扩展性。</p><h2 id="Intel-主板"><a href="#Intel-主板" class="headerlink" title="Intel 主板"></a>Intel 主板</h2><p>Intel 主板芯片适用于 Intel 处理器，其CPU插槽有金属阵脚，按性能主要分为 X/Z/B/H 四个等级：</p><ul><li><p>H 系列：入门级，不支持超频，价格比较便宜，适合一般家用电脑；</p></li><li><p>B 系列：主流级，不支持超频，可扩展能力强大，性价比很高；</p></li><li><p>Z 系列：中高端，支持超频，搭配的 CPU 一般带有 “K” 字母后缀；</p></li><li><p>X 系列：最高级，用来搭配高端 CPU，CPU 型号后缀有 “X” 字母。</p></li></ul><h2 id="AMD主板"><a href="#AMD主板" class="headerlink" title="AMD主板"></a>AMD主板</h2><p>AMD 主板芯片适用于 AMD 处理器，其 CPU 插槽则是一堆小孔，按性能主要分为 X/B/A 三个等级：</p><ul><li><p>A 系列：入门级，不支持超频，普通办公用户使用，价格非常便宜；</p></li><li><p>B 系列：主流级，可以超频，性价比高，一般不支持动态扩频超频；</p></li><li><p>X 系列：最高级，支持自适应动态扩频超频，主要搭配高端 CPU。</p></li></ul><h2 id="主板板型"><a href="#主板板型" class="headerlink" title="主板板型"></a>主板板型</h2><ul><li><p>E-ATX 加强型：高性能主板，一般会有 8 个内存插槽，芯片组都是 X 系列等级的，适合使用带 X 后缀的处理器，但是价格很高，不推荐普通用户使用。</p></li><li><p>ATX 标准型：俗称“大板”，体型稍大，扩展性好，接口全，一般内存都是四插槽起，2 或 3 个 PCIe 接口和 M.2 接口，是现在用的最多的主板类型。</p></li><li><p>M-ATX 紧凑型：俗称“小板”，体型接近正方形，内存插槽一般是两个或者四个，会有一个 M.2 接口，扩展性虽然不高，但是可以满足大多数用户的需求。</p></li><li><p>mini-ITX 迷你型：迷你主板，接口数量属于日常刚好够用的水平，适合 ITX 迷你机箱，一般用来办公或者家用，不适合做游戏主机。</p></li></ul><h2 id="主板接口"><a href="#主板接口" class="headerlink" title="主板接口"></a>主板接口</h2><p>CPU 接口：关乎主板与 CPU 兼容问题，对于电脑小白来说，最好的办法是购买 CPU 主板套餐，商家搭配好的，兼容性肯定没问题，并且这种组合购买方式，相比单独买 CPU、主板，价格更实惠。</p><p>内存插槽：插槽的种类和数量的多少是决定一块主板好坏的重要指标，有多种类型和足够数量的扩展插槽就意味着今后有足够的可升级性和设备扩展性。</p><p>M.2 接口：这个接口最好是全速的，非全速的接口，无法满足 M.2 NVME 高速固态硬盘需求，与普通 SATA 固态速度无异，另外 Intel 平台 M.2 接口还可以安装傲腾内存。</p><h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><h2 id="Intel-处理器"><a href="#Intel-处理器" class="headerlink" title="Intel 处理器"></a>Intel 处理器</h2><p>拿 <code>Intel 酷睿 i5 9400F</code> 举例：</p><p>酷睿：系列名称，有至强、酷睿、赛扬、奔腾、凌动……</p><p>i5：CPU定位，分为 i3，i5，i7 和 i9 分别是低端，中端，中高端，高端。（不能仅通过 i 几判断 CPU 的性能，要看具体型号，例如 i5 7500 不如 i3 8100）</p><p>9：代表第几代，这里就是第九代（不意味着绝对性能的强弱）</p><p>400：代表级别，一般来说，其他都相同的情况下，数字越大，性能越强</p><p>F：代表特性后缀，分为笔记本和台式机</p><ul><li><p>台式机:</p><ul><li><p>X/XE：代表顶级至尊皇帝版CPU</p></li><li><p>K：代表开放倍频以供用户超频，即不锁频，可超频</p></li><li><p>S/T：代表节能版CPU，功率相较于不带后缀的略低，相应的频率也降低</p></li><li><p>R：代表该CPU采用了当代性能最高核显，常出现在一体机和迷你主机上，无法更换和升级</p></li><li><p>C：只出现在5代CPU中，CPU性能有所退步，但有最强集显CPU性能</p></li><li><p>F：代表无核显的CPU，需搭配独立显卡，这种CPU功耗小，发热低，价格也稍低</p></li></ul></li><li><p>笔记本：</p><ul><li><p>L：代表低电压版CPU，发热量与标准版相比大约只有一半</p></li><li><p>U：代表超低电压版CPU，发热量和功耗比L系列还要低</p></li><li><p>Y：代表超低功耗版CPU，发热量和功耗比U系列还要低</p></li><li><p>H：代表CPU无法更换和升级，笔记本上常见</p></li><li><p>M：代表标准电压CPU</p></li><li><p>Q：一般为四核CPU</p></li><li><p>X：一般为4核心8线程的旗舰机CPU</p></li><li><p>HQ：一般为四核CPU且CPU无法更换和升级</p></li><li><p>MQ：代表移动四核，CPU可更换</p></li><li><p>XM：代表四核心八线程，属于顶级CPU，处理器可超频</p></li></ul></li></ul><h2 id="AMD-处理器"><a href="#AMD-处理器" class="headerlink" title="AMD 处理器"></a>AMD 处理器</h2><p>拿 <code>AMD Ryzen 5 3600XT</code> 举例：</p><p>Ryzen：系列名称，有 Ryzen（锐龙）、Epyc（霄龙）……</p><p>5：代表R5（Ryzen 5）代表第几代，这里就是第五代，主要有 3、5、7、9、Threadripper。除了有 Ryzen，还有 Ryzen pro、Ryzen Threadripper Pro，它们主要面向商业用途，而不是大众消费者。</p><p>3600：代表级别，同一个系列下，Ryzen 后面的第一个数字越大，性能通常越强，最强的是 Threadripper。如果系列不同，则不一定。比如 Ryzen 7 5800X 的性能比 Ryzen 9 3900XT 强，虽然前者是 Ryzen 7，后者是 Ryzen 9，似乎 9 强于 7，但前者是 5000 系列，后者是 3000 系列。不同的系列代表不同的架构，前者是 Zen3 架构，后者是 Zen2 架构。</p><p>XT：代表特性后缀，分为笔记本和台式机</p><ul><li><p>台式机：</p><ul><li><p>无：标准</p></li><li><p>X：高性能，X 表示 XFR</p></li><li><p>XT：Matisse Refresh，频率通常比 X 的高</p></li><li><p>WX：工作站</p></li><li><p>E：低 TDP</p></li></ul></li><li><p>笔记本：</p><ul><li><p>U：标准</p></li><li><p>M：低 TDP</p></li><li><p>H：高性能</p></li><li><p>S：slim</p></li><li><p>HS：高性能的 Slim</p></li></ul></li></ul><h1 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h1><h2 id="NVIDIA-显卡"><a href="#NVIDIA-显卡" class="headerlink" title="NVIDIA 显卡"></a>NVIDIA 显卡</h2><p>拿 <code>NVIDIA GeForce GTX 1080 TI</code> 举例：</p><p>GeForce：显卡系列名称，有 GeForce，Quadro，TITAN……</p><p>GTX：代表显卡定位，GTX 代表高端，GTS 代表中端，GT 代表低端，RTX 代表新一代高端（搭载光线追踪技术）</p><p>10：代表的是第几代,这张显卡就是第十代显卡，越高性能越强。</p><p>8：则是显卡性能档次的定位，数字越高在这一代里性能就越强。</p><p>0：不用管这位数字，一般都是 0，部分显卡没有这一位</p><p>TI：代表特殊版本，TI是增强版，Super 代表小幅增强版，SE 削弱版，M 是移动版（笔记本）如 MX，Max-Q，没有后缀则代表普通版</p><h2 id="AMD-显卡"><a href="#AMD-显卡" class="headerlink" title="AMD 显卡"></a>AMD 显卡</h2><p>拿 <code>AMD Radeon RX 5700 XT</code> 举例：</p><p>Radeon：显卡系列名称，有 Radeon，Radeon Pro……</p><p>RX：代表显卡系列细分名称，有 RX，HD，R(1~9)，W，WX，SSG，Duo……</p><p>5：代表系列号，这张代表第五系列（也可以说第五代），基本上越大越好。</p><p>70：则是显卡性能档次的定位，数字越高在这一系列里性能就越强。</p><p>0：不用管这位数字，一般都是 0，部分显卡没有这一位，如 RX 470，RX 480等。</p><p>XT：代表特殊版本，大致（不绝对）性能排序 XTX &gt; XT &gt; XL/GTO &gt; Pro/gt &gt; SE，没有后缀则代表普通版。</p><p>PS：AMD 的显卡种类繁多，命名纷繁复杂，很多都不绝对，也不按套路出牌，不可避免有错漏的地方，欢迎指正补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主板&quot;&gt;&lt;a href=&quot;#主板&quot; class=&quot;headerlink&quot; title=&quot;主板&quot;&gt;&lt;/a&gt;主板&lt;/h1&gt;&lt;p&gt;主板是影响电脑好坏的关键硬件之一，目前市场上主板的型号产品众多，主板一般考虑三大方面：&lt;code&gt;主板芯片等级&lt;/code&gt;决定其性能的高低
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用工具列表</title>
    <link href="http://blog.catwen.cn/2021/09/30/awesome-tools/"/>
    <id>http://blog.catwen.cn/2021/09/30/awesome-tools/</id>
    <published>2021-09-30T08:59:08.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上网"><a href="#上网" class="headerlink" title="上网"></a>上网</h2><p>主<a href="https://admin.91zfdao.com/auth/register?code=B5pg" target="_blank" rel="noopener">追风岛</a>，备谷歌云</p><ul><li>软件方面，Mac 下用 <code>V2rayU</code>，iPhone 下用 <code>ShadowRocket</code>（切美区下载）</li><li>通过 <a href="https://www.proxifier.com/" target="_blank" rel="noopener">Proxifier</a> 实现 terminal 科学上网</li><li>家里是软路由，固件选择 爱快 + openwrt</li><li>电视盒子有 <code>FireTV</code> 和 <code>Google TV</code> 看 Youtube 和 Netflix</li></ul><h2 id="编辑器和开发辅助"><a href="#编辑器和开发辅助" class="headerlink" title="编辑器和开发辅助"></a>编辑器和开发辅助</h2><ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a></li><li>Terminal 用 <a href="https://iterm2.com/" target="_blank" rel="noopener">iTerm2</a> + zsh + <a href="https://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh</a> 的组合</li><li><a href="https://docker.io/" target="_blank" rel="noopener">Docker</a>，这个不用解释了吧</li><li><a href="https://k3s.io/" target="_blank" rel="noopener">k3s</a>，轻量化的 k8s</li><li><a href="https://colorsnapper.com/" target="_blank" rel="noopener">ColorSnapper2</a>，取色工具</li><li><a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a>，抓包用</li><li><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump</a>，目录跳转</li><li><a href="https://github.com/jonas/tig" target="_blank" rel="noopener">tig</a>，git 扩展</li><li><a href="https://github.com/sharkdp/bat" target="_blank" rel="noopener">bat</a>，带行号的 cat，可以配 alias cat=”bat”</li><li><a href="https://www.navicat.com.cn/" target="_blank" rel="noopener">Navicat</a>，数据库客户端工具</li><li>BestTrace，路由跟踪测试</li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a>，Git 命令太多，有时候借助一下图形界面</li></ul><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ul><li>网络：3865U 软路由 + 网件 R7000</li><li>主力电脑：MacBook Pro 2015 i7 16G，感觉还可以再用几年</li><li>键盘：HHKB Professional2 Type-S，自己买了个蓝牙模块装了上去</li><li>鼠标：罗技 MX Master 3</li><li>显示器：DELL U2718Q + DELL U2720QM</li><li>耳机：索尼 WH-1000XM3 降噪比 BOSE QC35 强</li><li>音响：哈曼卡顿 Aura Studio 3 琉璃 3 代，放在家里偶尔听听歌，低音效果不错</li><li>乐歌升降桌 + 人体工学椅</li><li>明基 ScreenBar Plus</li><li>iPad Air 做 HomeKit 家庭中枢</li><li>kindle，看书</li><li>索尼 A7M3 + 适马 35 1.4 ART</li><li><del>佳能 6D + 70-200 F4 + 17-40 F4 + 50 F1.8</del> 转索尼，都卖掉了</li><li><del>大疆 Mavic Pro</del> 一直吃灰，也卖掉了</li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><a href="https://www.notion.so/" target="_blank" rel="noopener">Notion</a>，主力笔记</li><li><a href="https://obsidian.md/" target="_blank" rel="noopener">Obsidian</a>，串联笔记</li><li><a href="https://app.milanote.com/" target="_blank" rel="noopener">milanote</a>，头脑风暴笔记</li><li><a href="https://pasteapp.io/" target="_blank" rel="noopener">Paste</a>，粘贴板管理</li><li><a href="https://github.com/ripperhe/Bob" target="_blank" rel="noopener">Bob</a>，Mac 端翻译软件，支持划词翻译、截图翻译等</li><li><a href="https://iina.io/" target="_blank" rel="noopener">IINA</a>，视频播放</li><li><a href="https://www.spotify.com/" target="_blank" rel="noopener">Spotify</a>，曲库挺全，家庭计划也很便宜</li><li><a href="https://motrix.app/" target="_blank" rel="noopener">Motrix</a>，开源的下载工具</li><li><a href="https://github.com/Caldis/Mos" target="_blank" rel="noopener">Mos</a>，丝般顺滑的滚动效果</li><li><a href="https://lemon.qq.com/" target="_blank" rel="noopener">腾讯柠檬</a>，垃圾清理</li><li><a href="https://www.xmind.cn/" target="_blank" rel="noopener">XMind</a>，脑图</li></ul><h2 id="在线服务"><a href="#在线服务" class="headerlink" title="在线服务"></a>在线服务</h2><ul><li><a href="https://carbon.now.sh/" target="_blank" rel="noopener">carbon</a>，根据源码生成图片</li><li><a href="https://regex101.com/" target="_blank" rel="noopener">regex101</a>，调正则表达式</li><li><a href="https://30secondsofcode.org/" target="_blank" rel="noopener">30 seconds of code</a>，各种代码片段</li><li><a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a>，调 ast</li><li><a href="https://globster.xyz/" target="_blank" rel="noopener">globtester</a>，调 glob</li><li><a href="https://caniuse.com/" target="_blank" rel="noopener">Can I use</a>，查询浏览器的特性支持情况</li><li><a href="https://react-svgr.com/" target="_blank" rel="noopener">SVGR</a>，SVG 转 React 组件</li><li><a href="https://createapp.dev/webpack/no-library--babel" target="_blank" rel="noopener">create app</a>，webpack 配置工具</li><li><a href="https://diff.intrinsic.com/" target="_blank" rel="noopener">Package Diff</a>，比较 npm 包两个版本直接的区别</li><li><a href="https://www.instapaper.com/u" target="_blank" rel="noopener">instapaper</a>，稍后阅读</li><li><a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">emoji</a>，emoji 查询</li><li><a href="https://cssgradient.io/" target="_blank" rel="noopener">cssgradient</a>，渐变色 css 生成</li><li><a href="https://bestof.js.org/" target="_blank" rel="noopener">best of js</a>，对 github 做了一层筛选</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;上网&quot;&gt;&lt;a href=&quot;#上网&quot; class=&quot;headerlink&quot; title=&quot;上网&quot;&gt;&lt;/a&gt;上网&lt;/h2&gt;&lt;p&gt;主&lt;a href=&quot;https://admin.91zfdao.com/auth/register?code=B5pg&quot; target=&quot;_
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编写 React 组件的 10 个建议</title>
    <link href="http://blog.catwen.cn/2019/07/05/the-10-component-commandments/"/>
    <id>http://blog.catwen.cn/2019/07/05/the-10-component-commandments/</id>
    <published>2019-07-05T18:25:04.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/the-10-component-commandments/1.jpg" alt="img"></p><p>写一个公用的组件很难，你必须细心地考虑很多问题，比如应该暴露出哪些 <code>props</code>。</p><p>本文将简要的介绍 API 设计中的一些最佳实践，以及编写 React 组件的 10 条参考规则。</p><h2 id="什么是-API-？"><a href="#什么是-API-？" class="headerlink" title="什么是 API ？"></a>什么是 API ？</h2><p>API （Application Programming Interface）是两段代码或者两个应用如何交互的一个定义或者接口。</p><ul><li>后端和前端交互使用的是就是 API，可以通过此 API 获取或者操作一组数据</li><li>类和调用该类的代码之间的接口也是 API，你可以调用类里面的方法</li></ul><p>同理，组件定义的 <code>props</code> 也是 API，这是用户与组件交互的方式。</p><h2 id="API-设计中的一些最佳实践"><a href="#API-设计中的一些最佳实践" class="headerlink" title="API 设计中的一些最佳实践"></a>API 设计中的一些最佳实践</h2><p>所以，设计一个 API 的时候应该有哪些规则和注意事项？我们做了很多研究并结合实践给出了 4 条 API 设计的最佳实践：</p><h4 id="稳定的版本"><a href="#稳定的版本" class="headerlink" title="稳定的版本"></a>稳定的版本</h4><p>最重要的规则之一就是要保持稳定，意思就是要最大限度的减少破坏性的升级，如果你做了破坏性的升级，一定要写一个完整的升级指南，如果可能的话，再提供一些 API 让用户消化升级的过程，使用户升级版本的成本降低。</p><p>如果你要发布 API，请使用 <a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化版本</a>，以便用户可以自由的选择他们需要的版本。</p><h4 id="提供错误描述信息"><a href="#提供错误描述信息" class="headerlink" title="提供错误描述信息"></a>提供错误描述信息</h4><p>调用 API 出错的时候，返回给客户端一个详细的错误说明，并且告诉客户端应该如何解决。在没有任何上下文的情况下返回一个 “调用出错” 的错误信息给客户端并不是一个友好的体验。</p><h4 id="不要让开发人员迷惑"><a href="#不要让开发人员迷惑" class="headerlink" title="不要让开发人员迷惑"></a>不要让开发人员迷惑</h4><p>开发人员都是很傲娇的，并不想在使用你 API 的时候感到迷惑，换句话说，使你的 API 尽可能的直观，规范。可以通过遵循一些原则和命名规范去实现。</p><p>举个例子，你的 API 提供了 boolean 类型的参数，参数命名的时候你在一个地方用 is 做前缀，另外一个地方又用了 has 做前缀，然后其他地方又用了另外一个前缀，这会让开发人员比较迷惑。</p><h4 id="暴露出来的-API-尽可能的少"><a href="#暴露出来的-API-尽可能的少" class="headerlink" title="暴露出来的 API 尽可能的少"></a>暴露出来的 API 尽可能的少</h4><p>当然不是说功能多了不好，只是要善用外观模式或者命令模式等去封装一些操作，做到高内聚，API 过多会增加学习成本，一个高内聚的 API 会被认做是一个易于使用的 API。</p><h2 id="组件设计的-10-个建议"><a href="#组件设计的-10-个建议" class="headerlink" title="组件设计的 10 个建议"></a>组件设计的 10 个建议</h2><p>上面 4 条规则在 REST APIs 中应用的很好，之前提过的，我们的组件也有它的 API，就是 <code>props</code>，我们该如何定义 <code>props</code> 使它不违反上面的规则呢？下面列出 10 条建议：</p><h4 id="写文档"><a href="#写文档" class="headerlink" title="写文档"></a>写文档</h4><p>如果你没有写个组件的使用文档，好吧，使用者可以看你的代码，但这并不是一个好的体验。</p><p>有很多写文档的工具，这里推荐三个：</p><ul><li><a href="https://storybook.js.org/" target="_blank" rel="noopener">Storybook</a></li><li><a href="https://react-styleguidist.js.org/" target="_blank" rel="noopener">Styleguidist</a></li><li><a href="https://www.docz.site/" target="_blank" rel="noopener">Docz</a></li></ul><p>不管选用哪个，一定要把所有的 API 使用说明都写出来。</p><h4 id="允许上下文语义"><a href="#允许上下文语义" class="headerlink" title="允许上下文语义"></a>允许上下文语义</h4><p>HTML是一种以语义方式结构化信息的语言。然而，我们的大多数组件都是由 <code>&lt;div /&gt;</code> 标签组成的。它在某种程度上是没问题的，因为通用组件不知道我们想要的是 <code>&lt;article /&gt;</code> 或 <code>&lt;section /&gt;</code> 还是 <code>&lt;aside /&gt;</code>，但是这样并不优雅。所以，我们建议允许组件接受一个 <code>prop</code>，它将覆盖正在呈现的 DOM 元素。以下是如何实现它的示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grid</span>(<span class="params">&#123; as: Element, ...props &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;Element className="grid" &#123;...props&#125; /&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Grid.defaultProps = &#123;</span><br><span class="line">  <span class="keyword">as</span>: <span class="string">'div'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 jsx 中把 <code>as</code> prop 重命名文本地变量 <code>Element</code>，并且把默认值设为 <code>div</code>。</p><p>使用 <code>&lt;Grid /&gt;</code> 的时候传递你想要的标签名就好了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Grid <span class="keyword">as</span>=<span class="string">"main"</span>&gt;</span><br><span class="line">      &lt;MoreContent /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Grid&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这样在 React 中使用是没有问题的，另外一个经典的例子就是你有一个 <code>&lt;Button /&gt;</code> 组件，想把它渲染成 React Router 的 <code>&lt;Link /&gt;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button <span class="keyword">as</span>=&#123;Link&#125; to=<span class="string">"/profile"</span>&gt;</span><br><span class="line">  Go to Profile</span><br><span class="line">&lt;<span class="regexp">/Button&gt;</span></span><br></pre></td></tr></table></figure><h4 id="避免使用-boolean-props"><a href="#避免使用-boolean-props" class="headerlink" title="避免使用 boolean props"></a>避免使用 boolean props</h4><p>Boolean props 听起来是个不错的选择，因为你可以不用指定值，看起来非常优雅。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button large&gt;BUY NOW!&lt;<span class="regexp">/Button&gt;</span></span><br></pre></td></tr></table></figure><p>尽管 Boolean props 看起来非常优雅，但是它只能支持两个值 <code>true</code> or <code>false</code></p><p>如果你的组件设计了很多种 boolean 类型的 props 看起来就比较累赘了：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button large small primary disabled secondary&gt;</span><br><span class="line">  WHAT AM I??</span><br><span class="line">&lt;<span class="regexp">/Button&gt;</span></span><br></pre></td></tr></table></figure><p>换句话说，boolean 通常很难根据需求去扩展。换成字符串枚举是一个更好的选择，它可以扩展为二元值之外的任意值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button variant=<span class="string">"primary"</span> size=<span class="string">"large"</span>&gt;</span><br><span class="line">  I am primarily a large button</span><br><span class="line">&lt;<span class="regexp">/Button&gt;</span></span><br></pre></td></tr></table></figure><p>不是说 boolean props 一无是处，一些不可能扩展并且只有两个值的 prop 比如 disabled 还是用 boolean 类型。</p><h4 id="使用-props-children"><a href="#使用-props-children" class="headerlink" title="使用 props.children"></a>使用 props.children</h4><p>React 有几个特殊的 prop，比如 <code>key</code>，他们有特殊的处理机制，还有一个就是 <code>children</code>。</p><p>在开始标签和结束标签中间的内容都会被塞进 <code>props.children</code> props，应该尽可能多的使用它，因为它比一个 <code>content</code> prop，或者一些文本内容需要传递的时候更易使用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;TableCell content=<span class="string">"Some text"</span> /&gt;</span><br><span class="line"><span class="comment">// vs</span></span><br><span class="line">&lt;TableCell&gt;Some text&lt;<span class="regexp">/TableCell&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>props.children</code> 有几个好处。首先，它类似于常规 HTML 的使用方式。其次，你可以自由地传递任何你想要的东西，而不是将 <code>leftIcon</code> 和 <code>rightIcon</code> prop 添加到组件中，只需将它们作为 <code>props.children</code> prop 的一部分传递：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;TableCell&gt;</span><br><span class="line">  &lt;ImportantIcon /&gt; Some text</span><br><span class="line">&lt;<span class="regexp">/TableCell&gt;</span></span><br></pre></td></tr></table></figure><p>你可能会说你的组件只会渲染纯文本，不需要其他东西，现在看来可能没问题，但是以后需求不断变化的时候你就会发现 <code>props.children</code> 的好处。</p><h4 id="父组件钩子函数"><a href="#父组件钩子函数" class="headerlink" title="父组件钩子函数"></a>父组件钩子函数</h4><p>有时候我们会写一些内部逻辑很复杂的组件，比如 <code>AutoComplete</code> 或者一些图表。</p><p>这些类型的组件要渲染的内容通常依赖外部的 API，随着时间的推移，可能还要实现一些特殊的需求</p><p>我们如何提供一个单一又标准化的 prop 让调用者去控制或者覆盖组件内部的默认逻辑呢？</p><p>解决方案是 <code>state reducers</code> 模式，这里有一篇文章 <a href="https://kentcdodds.com/blog/the-state-reducer-pattern" target="_blank" rel="noopener">post about the concept itself</a></p><p>总结下来，<code>state reducer</code> 模式就是让消费者可以访问到组件内部发生的一切事件、状态，从而进行更高级的自定义配置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCustomDropdown</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stateReducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (action.type === Dropdown.actions.CLOSE) &#123;</span><br><span class="line">      buttonRef.current.focus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Dropdown stateReducer=&#123;stateReducer&#125; &#123;...props&#125; /&gt;</span><br><span class="line">      &lt;Button ref=&#123;buttonRef&#125;&gt;Open&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩散剩余的-props"><a href="#扩散剩余的-props" class="headerlink" title="扩散剩余的 props"></a>扩散剩余的 props</h4><p>当你创建一个新组件的时候，确保剩余的 props 被传递到可以生效的 element 上，不必仅仅是为了向底层组件传递 props 就额外添加一个。可以用 <code>...rest</code> 操作符：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToolTip</span>(<span class="params">&#123; isVisible, ...rest &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isVisible ? &lt;span role="tooltip" &#123;...rest&#125; /&gt; : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给出足够的默认值"><a href="#给出足够的默认值" class="headerlink" title="给出足够的默认值"></a>给出足够的默认值</h4><p>尽量为 props 提供默认值，这样也可以大大减少需要传递 props 的数量，以 <code>onClick</code> 为例，可以提供一个空函数作为默认值，另外可以为字符类型的 prop 提供一个空字符串作为默认值，这样当没有传递 prop 的时候就可以确保处理的是空字符串而不是 undefined 或者 null 等不确定的值 </p><h4 id="不要重命名-HTML-的属性"><a href="#不要重命名-HTML-的属性" class="headerlink" title="不要重命名 HTML 的属性"></a>不要重命名 HTML 的属性</h4><p>HTML 标签本身就含有自己的一些属性，就是他自己的 API，为什么不用呢？</p><p>就像前面提到过的，减少暴露的 API，为什么要添加一个 screenReaderLabel prop 而不用自身原有的 aria-label API呢？</p><p>所以，请不要为了“易用性”而去重复定义，比如添加了 screenReaderLabel prop，然后又传递了一个 aria-label 属性，那么最终显示应该是什么呢？</p><p>另外，请不要覆盖 HTML 标签本身的属性，比如 <code>&lt;button /&gt;</code> 元素的 type 属性，可以是 submit（默认）button 或者 reset，然而许多开发者都将它重新定义为其他的含义的props（primary warning info 等），这样就令使用者比较迷惑。</p><h4 id="编写-prop-types"><a href="#编写-prop-types" class="headerlink" title="编写 prop types"></a>编写 prop types</h4><p>代码既文档，现在已经有 <code>prop-types</code> 包可用，去使用它。</p><p>如果没有传递一些必须的 props，控制台会报错，如果用的是 TypeScript 或者 Flow，那开发体验就更好了。</p><h4 id="为开发者设计"><a href="#为开发者设计" class="headerlink" title="为开发者设计"></a>为开发者设计</h4><p>最后，遵循最重要的规则。确保您的 API 和 “组件体验” 针对将使用它的人员或是开发同事进行了优化。</p><p>提升开发体验的一个方法就是提供详细的报错信息，或者是在开发模式下在控制台发出警告。</p><p>在控制台报错或者报警的时候，如果开发人员也看到了对应错误或者警告的文档链接，会大大提升组件的使用体验。</p><p>不必担心过于冗长的错误信息会占用太大空间，况且构建生产环境的时候也不会把这些信息打包进去。</p><p>React 本身就是一个非常优秀的类库，当你忘记使用 key 或者拼错了生命周期的名字等等，都会在控制台收到大量详细的错误警告信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/the-10-component-commandments/1.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;写一个公用的组件很难，你必须细心地考虑很多问题，比如应该暴露出哪些 &lt;code&gt;props&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;本文将
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何使用 traefik 作为 docker 容器的反向代理</title>
    <link href="http://blog.catwen.cn/2019/05/25/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-centos-7/"/>
    <id>http://blog.catwen.cn/2019/05/25/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-centos-7/</id>
    <published>2019-05-25T17:19:00.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://www.digitalocean.com/community/tutorials/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-centos-7" target="_blank" rel="noopener">How To Use Traefik as a Reverse Proxy for Docker Containers on CentOS 7</a><br>译文出自：<a href="/2019/05/25/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-centos-7/" title="夜色镇歌的个人博客">夜色镇歌的个人博客</a></p></blockquote><p><img src="/images/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-centos-7/4.png" alt="img"></p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Docker 已经非常的流行，在生产环境中跑应用程序非常便捷和高效，当我们在一台机器上跑很多容器的时候，就要配置一个反向代理，因为通常我们只想把 <code>80</code> 和 <code>443</code> 端口暴露出去。</p><p>Traefik 是一个可以感知 Docker 容器并且内置监控面板的反向代理，本文中，你将会使用 Traefik 反向代理两个都和 <code>MySQL</code> 通讯的容器：<code>Wordpress</code> 和 <code>Adminer</code>，并且使用 <code>Let&#39;s Encrypt</code> 配置 Traefik 的 <code>HTTPS</code></p><p>Traefik 很强大，它的示意图如下：</p><p><img src="/images/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-centos-7/3.png" alt="img"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>一台 <code>CentOS 7</code> 服务器</li><li>安装了 <code>Docker</code></li><li>安装了 <code>Docker Compose</code></li><li>一个域名和三条域名解析 <code>A 记录</code></li></ul><h1 id="第一步：配置并且启动-Traefik"><a href="#第一步：配置并且启动-Traefik" class="headerlink" title="第一步：配置并且启动 Traefik"></a>第一步：配置并且启动 Traefik</h1><p>我们使用 Traefik 的 <a href="https://hub.docker.com/_/traefik" target="_blank" rel="noopener">官方镜像</a> 来启动。</p><p>运行之前需要先创建一个配置文件并且配置密码来访问 Traefik 的监控面板。</p><p>我们使用 <code>htpasswd</code> 工具来生成密码，<code>htpasswd</code> 在 <code>httpd-tools</code> 包中，安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y httpd-tools</span><br></pre></td></tr></table></figure><p>之后使用 <code>htpasswd</code> 来生成密码，<code>secure_password</code> 是用来访问 Traefik 的管理员用户 <code>admin</code> 的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -nb admin secure_password</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin:<span class="variable">$apr1</span><span class="variable">$kEG</span>/8JKj<span class="variable">$yEXj8vKO7HDvkUMI</span>/SbOO.</span><br></pre></td></tr></table></figure><p>我们会把这个用作 Traefik 的 <code>HTTP Basic</code> 验证。</p><p>之后开始配置 Traefik，先创建一个 <code>traefik.toml</code> 文件，使用 <code>TOML</code> 格式，<a href="https://github.com/toml-lang/toml" target="_blank" rel="noopener">TOML</a> 是一个类似 <code>INI</code> 的配置语言，我们用这个文件来配置 Traefik 以及我们将使用的各种与之集成的应用程序，本文中，我们会用到三个 Traefik 可用的 Provider：<code>api</code>  <code>docker</code> 和 <code>acme</code></p><p>使用 <code>vi</code> 或者其他编辑器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi traefik.toml</span><br></pre></td></tr></table></figure><p>按i进入插入模式，然后添加两个命名的 <code>entryPoint</code>，<code>http</code> 和 <code>https</code>，默认情况下所有后端都可以访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaultEntryPoints = [&quot;http&quot;, &quot;https&quot;]</span><br></pre></td></tr></table></figure><p>稍后来配置 <code>http</code> 和 <code>https</code> 的 <code>entryPoint</code>。</p><p>下一步，我们配置 <code>api Provider</code>，它可以让我们访问监控面板，这个地方把上面 <code>htpasswd</code> 生成的密码拷过来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[entryPoints]</span><br><span class="line">  [entryPoints.dashboard]</span><br><span class="line">    address = &quot;:8080&quot;</span><br><span class="line">    [entryPoints.dashboard.auth]</span><br><span class="line">      [entryPoints.dashboard.auth.basic]</span><br><span class="line">        users = [&quot;admin:your_encrypted_password&quot;]</span><br><span class="line"></span><br><span class="line">[api]</span><br><span class="line">entrypoint=&quot;dashboard&quot;</span><br></pre></td></tr></table></figure><p><code>dashboard</code> 是在 Traefik 容器里单独运行的 web ui，端口是 <code>8080</code></p><ul><li><code>entrypoints.dashboard</code> 节点是告诉 Traefik 我们如何与 <code>api</code> 通讯</li><li><code>entrypoints.dashboard.auth.basic</code> 节点是为 <code>dashboard</code> 配置 <code>HTTP Basic</code> 验证</li></ul><p>已经配置好了 dashboard 的 entryPoint，还需要配置其他标准的 <code>HTTP</code> 和 <code>HTTPS</code> 连接的 entryPoint。</p><p><code>entryPoints</code> 节点配置的是 Traefik 可以监听或者代理的地址，把下面这部分添加进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  [entryPoints.http]</span><br><span class="line">    address = &quot;:80&quot;</span><br><span class="line">      [entryPoints.http.redirect]</span><br><span class="line">        entryPoint = &quot;https&quot;</span><br><span class="line">  [entryPoints.https]</span><br><span class="line">    address = &quot;:443&quot;</span><br><span class="line">      [entryPoints.https.tls]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>HTTP</code> 的默认端口是 80，<code>HTTPS</code> 的默认端口是 443，上面配置的意思是将 HTTP 请求重定向到 HTTPS中。</p><p>下一步，配置 <code>Let&#39;s Encrypt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[acme]</span><br><span class="line">email = &quot;your_email@your_domain&quot;</span><br><span class="line">storage = &quot;acme.json&quot;</span><br><span class="line">entryPoint = &quot;https&quot;</span><br><span class="line">onHostRule = true</span><br><span class="line">  [acme.httpChallenge]</span><br><span class="line">  entryPoint = &quot;http&quot;</span><br></pre></td></tr></table></figure><p>此部分称为 <code>acme</code>，ACME 是用于与 <code>Let&#39;s Encrypt</code> 通信并且管理证书的协议名称。 Let’s Encrypt 服务需要使用有效的电子邮件地址进行注册。然后，我们指定将把我们将从 Let’s Encrypt 接收的信息存储在名为 <code>acme.json</code> 的JSON文件中。 </p><ul><li><p><code>entryPoint</code> 是需要指要处理的入口点类型，在我们的例子中是 https。</p></li><li><p><code>onHostRule</code> 是让 <code>Traefik</code> 决定如何生成证书，<code>true</code> 表示当设置了 <code>HostName</code> 的容器一经创建就生成。</p></li></ul><p>最后，把下面的添加进去来配置 <code>Docker Provider</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[docker]</span><br><span class="line">domain = &quot;your_domain&quot;</span><br><span class="line">watch = true</span><br><span class="line">network = &quot;web&quot;</span><br></pre></td></tr></table></figure><p><code>Docker Provider</code> 可以让 Traefik 充当 Docker 容器前的反向代理角色，上面配置的意思是监听 <code>network</code> 为 <code>web</code> 的容器</p><p>到此为止，<code>traefik.toml</code> 应该是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">defaultEntryPoints = [&quot;http&quot;, &quot;https&quot;]</span><br><span class="line"></span><br><span class="line">[entryPoints]</span><br><span class="line">  [entryPoints.dashboard]</span><br><span class="line">    address = &quot;:8080&quot;</span><br><span class="line">    [entryPoints.dashboard.auth]</span><br><span class="line">      [entryPoints.dashboard.auth.basic]</span><br><span class="line">        users = [&quot;admin:your_encrypted_password&quot;]</span><br><span class="line">  [entryPoints.http]</span><br><span class="line">    address = &quot;:80&quot;</span><br><span class="line">      [entryPoints.http.redirect]</span><br><span class="line">        entryPoint = &quot;https&quot;</span><br><span class="line">  [entryPoints.https]</span><br><span class="line">    address = &quot;:443&quot;</span><br><span class="line">      [entryPoints.https.tls]</span><br><span class="line"></span><br><span class="line">[api]</span><br><span class="line">entrypoint=&quot;dashboard&quot;</span><br><span class="line"></span><br><span class="line">[acme]</span><br><span class="line">email = &quot;your_email@your_domain&quot;</span><br><span class="line">storage = &quot;acme.json&quot;</span><br><span class="line">entryPoint = &quot;https&quot;</span><br><span class="line">onHostRule = true</span><br><span class="line">  [acme.httpChallenge]</span><br><span class="line">  entryPoint = &quot;http&quot;</span><br><span class="line"></span><br><span class="line">[docker]</span><br><span class="line">domain = &quot;your_domain&quot;</span><br><span class="line">watch = true</span><br><span class="line">network = &quot;web&quot;</span><br></pre></td></tr></table></figure><h1 id="第二步：启动-Traefik-容器"><a href="#第二步：启动-Traefik-容器" class="headerlink" title="第二步：启动 Traefik 容器"></a>第二步：启动 Traefik 容器</h1><p>首先，为 Docker 创建一个 network: <code>web</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create web</span><br></pre></td></tr></table></figure><p>当 Traefik 容器启动时，我们会将其添加到此网络中。稍后在此网络中添加其他容器，以便 Traefik 监听和代理。</p><p>接下来，创建一个空文件，它将保存我们的 Let’s Encrypt 的加密信息，并设置权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch acme.json</span><br><span class="line">chmod 600 acme.json</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v <span class="variable">$PWD</span>/traefik.toml:/traefik.toml \</span><br><span class="line">  -v <span class="variable">$PWD</span>/acme.json:/acme.json \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  -p 443:443 \</span><br><span class="line">  -l traefik.frontend.rule=Host:monitor.your_domain \</span><br><span class="line">  -l traefik.port=8080 \</span><br><span class="line">  --network web \</span><br><span class="line">  --name traefik \</span><br><span class="line">  traefik:1.7.6-alpine</span><br></pre></td></tr></table></figure><p>其中两个标签告诉 Traefik 将 monitor.your_domain 的流量导入到容器的 8080 端口，也就是监控仪表盘暴露的端口号。</p><p>容器启动成功后，访问 <a href="https://monitor.your_domain" target="_blank" rel="noopener">https://monitor.your_domain</a> 来查看控制台，如图所示。</p><p><img src="/images/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-centos-7/1.png" alt="img"></p><h1 id="第三步：在-Traefik-中注册容器"><a href="#第三步：在-Traefik-中注册容器" class="headerlink" title="第三步：在 Traefik 中注册容器"></a>第三步：在 Traefik 中注册容器</h1><p>运行 Traefik 容器成功后，来跑我们自己的容器：</p><ul><li><a href="https://hub.docker.com/_/wordpress/" target="_blank" rel="noopener">wordpress</a></li><li><a href="https://hub.docker.com/_/adminer/" target="_blank" rel="noopener">adminer</a></li></ul><p>使用 <code>docker-compose</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  web:</span><br><span class="line">    external: true</span><br><span class="line">  internal:</span><br><span class="line">    external: false</span><br></pre></td></tr></table></figure><p>为了让 Traefik 能发现他们，他们必须在一个网络环境中，因此我们手动创建了 <code>docker network</code> ，下面开始定义 <code>services</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  web:</span><br><span class="line">    external: true</span><br><span class="line">  internal:</span><br><span class="line">    external: false</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  blog:</span><br><span class="line">    image: wordpress:4.9.8-apache</span><br><span class="line">    environment:</span><br><span class="line">      WORDPRESS_DB_PASSWORD:</span><br><span class="line">    labels:</span><br><span class="line">      - traefik.backend=blog</span><br><span class="line">      - traefik.frontend.rule=Host:blog.your_domain</span><br><span class="line">      - traefik.docker.network=web</span><br><span class="line">      - traefik.port=80</span><br><span class="line">    networks:</span><br><span class="line">      - internal</span><br><span class="line">      - web</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD:</span><br><span class="line">    networks:</span><br><span class="line">      - internal</span><br><span class="line">    labels:</span><br><span class="line">      - traefik.enable=false</span><br><span class="line">  adminer:</span><br><span class="line">    image: adminer:4.6.3-standalone</span><br><span class="line">    labels:</span><br><span class="line">      - traefik.backend=adminer</span><br><span class="line">      - traefik.frontend.rule=Host:db-admin.your_domain</span><br><span class="line">      - traefik.docker.network=web</span><br><span class="line">      - traefik.port=8080</span><br><span class="line">    networks:</span><br><span class="line">      - internal</span><br><span class="line">      - web</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br></pre></td></tr></table></figure><p>让 traefik 监听和反向代理的关键配置就是 <code>traefik.backend</code> <code>traefik.frontend.rule</code> 和 <code>traefik.port</code></p><p>启动之前设置好环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> WORDPRESS_DB_PASSWORD=secure_database_password</span><br><span class="line"><span class="built_in">export</span> MYSQL_ROOT_PASSWORD=secure_database_password</span><br></pre></td></tr></table></figure><p>愉快的启动吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>再回到控制台：</p><p><img src="/images/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-centos-7/2.png" alt="img"></p><p>访问配置的域名: <code>db-admin.your_domain</code> <code>blog.your_domain</code> 已经跑起来了，不要忘了在域名控制台配置域名解析</p><p>完事，再也不用每次都去修改 <code>nginx/caddy</code> 的 <code>conf</code> 了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-o
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何避免 await/async 地狱</title>
    <link href="http://blog.catwen.cn/2018/05/10/how-to-escape-async-await-hell/"/>
    <id>http://blog.catwen.cn/2018/05/10/how-to-escape-async-await-hell/</id>
    <published>2018-05-10T08:33:38.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/how-to-escape-async-await-hell/1.png" alt="img"></p><blockquote><p>原文地址：<a href="https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c" target="_blank" rel="noopener">How to escape async/await hell</a><br>译文出自：<a href="/2018/05/10/how-to-escape-async-await-hell/" title="夜色镇歌的个人博客">夜色镇歌的个人博客</a></p></blockquote><p>async/await 把我们从回调地狱中解救了出来，但是如果滥用就会掉进 async/await 地狱。</p><p>本文中我会解释一下什么是 async/await 地狱，并会分享几个技巧去避免。</p><h2 id="啥是-await-async-地狱"><a href="#啥是-await-async-地狱" class="headerlink" title="啥是 await/async 地狱"></a>啥是 await/async 地狱</h2><p>异步 Javascript 编程中，我们通常会写许多 async 方法，并且使用 <code>await</code> 关键字去等待它，有很多时候下一行的执行并不依赖于上一行，但是我们仍然使用了 <code>await</code> 去等待，所以可能会导致一些性能问题。</p><h2 id="一个-await-async-地狱的例子"><a href="#一个-await-async-地狱的例子" class="headerlink" title="一个 await/async 地狱的例子"></a>一个 await/async 地狱的例子</h2><p>如何编写一个订购披萨和饮料的代码？它可能会像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> pizzaData = <span class="keyword">await</span> getPizzaData()    <span class="comment">// async call</span></span><br><span class="line">  <span class="keyword">const</span> drinkData = <span class="keyword">await</span> getDrinkData()    <span class="comment">// async call</span></span><br><span class="line">  <span class="keyword">const</span> chosenPizza = choosePizza()    <span class="comment">// sync call</span></span><br><span class="line">  <span class="keyword">const</span> chosenDrink = chooseDrink()    <span class="comment">// sync call</span></span><br><span class="line">  <span class="keyword">await</span> addPizzaToCart(chosenPizza)    <span class="comment">// async call</span></span><br><span class="line">  <span class="keyword">await</span> addDrinkToCart(chosenDrink)    <span class="comment">// async call</span></span><br><span class="line">  orderItems()    <span class="comment">// async call</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>看起来没什么问题，也能正常工作，但这并不是一个好的实现。先来看下这段代码都做了什么，以便定位问题。</p><h2 id="解释下"><a href="#解释下" class="headerlink" title="解释下"></a>解释下</h2><p>我们把代码用 <code>async IIFE</code> 包裹了起来，然后下面这些会依次执行。</p><ol><li>获取披萨菜单</li><li>获取饮料菜单</li><li>从披萨菜单中选择披萨</li><li>从饮料菜单中选择饮料</li><li>把选好的披萨加到购物车</li><li>把选好的饮料加到购物车</li><li>下单</li></ol><h2 id="哪里错了？"><a href="#哪里错了？" class="headerlink" title="哪里错了？"></a>哪里错了？</h2><p>正如我刚强调的，这些语句会<strong>依次执行，没有并发</strong>。仔细想一下，为啥我获取饮料菜单之前得先获取披萨菜单？这两份菜单我应该同时去获取。当然，选择披萨之前得先获取披萨菜单，这个规则同样适用于饮料。</p><p>所以我们可以得出结论，披萨相关的工作和饮料相关的工作可以并行进行，但涉及披萨相关工作的各个步骤需要按顺序进行（一步接着一步）。</p><h2 id="另一个糟糕的例子"><a href="#另一个糟糕的例子" class="headerlink" title="另一个糟糕的例子"></a>另一个糟糕的例子</h2><p>这段代码会获取购物车中的购物项并且发出订购请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">orderItems</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> items = <span class="keyword">await</span> getCartItems()    <span class="comment">// async call</span></span><br><span class="line">  <span class="keyword">const</span> noOfItems = items.length</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; noOfItems; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> sendRequest(items[i])    <span class="comment">// async call</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中 for 循环在下一次迭代之前必须等待上一个 <code>sendRequest()</code> 执行完毕，可我们根本不需要等待，只想尽快的把请求都发送出去然后等待他们都完成。</p><p>想必现在你已经了解了什么是 async/await 地狱，以及它对性能的影响是多么的严重。现在我想问你个问题。</p><h2 id="如果忘记了-await-关键字呢？"><a href="#如果忘记了-await-关键字呢？" class="headerlink" title="如果忘记了 await 关键字呢？"></a>如果忘记了 await 关键字呢？</h2><p>如果忘记使用 await，async 函数会执行并且返回一个 Promise，你可以稍后再去resolve。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value = doSomeAsyncTask()</span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// an unresolved promise</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>另一个后果是编译器不知道你想把函数完全执行，所以编译器会退出程序而不完成异步函数，所以还是需要使用 await 关键字</p><p>promises 一个有趣的特性就是你可以在一行代码中去得到 Promise ，而在另外一行中去等待并 resolve，这是避免 async/await 地狱的关键之处。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = doSomeAsyncTask()</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">await</span> promise</span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// the actual value</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>正如你看到的，<code>doSomeAsyncTask()</code> 方法返回一个 Promise，调用的时候它已经开始执行了，为了得到他的解析值，我们使用了 await 关键字，告诉编译器等待解析完毕再执行下一行。</p><h2 id="如何避免-async-await-地狱"><a href="#如何避免-async-await-地狱" class="headerlink" title="如何避免 async/await 地狱"></a>如何避免 async/await 地狱</h2><p>你应该按照这些步骤来避免 async/await 地狱：</p><h4 id="找到语句的依赖关系"><a href="#找到语句的依赖关系" class="headerlink" title="找到语句的依赖关系"></a>找到语句的依赖关系</h4><p>第一个例子中，我们选择了一个披萨和一杯饮料。总结一下，选择披萨之前得先获取披萨菜单，加到购物车之前得先选好，这三个步骤都是相互依赖的，必须等待上一个步骤完成后才能进行下一步。</p><p>我们选择饮料的时候并不依赖于选择披萨，所以选择披萨和饮料是可以并行执行的。这也是机器能比我们做的更好的一件事。</p><h4 id="封装相互依赖的异步方法"><a href="#封装相互依赖的异步方法" class="headerlink" title="封装相互依赖的异步方法"></a>封装相互依赖的异步方法</h4><p>正如你看到的，选择披萨的依赖有获取披萨菜单、选择、添加到购物车。所以我们把这些依赖放在一个异步方法里，饮料同理，这也是为什么我们会有 <code>selectPizza()</code> 和 <code>selectDrink()</code> 两个异步方法。</p><h4 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h4><p>我们利用事件循环去非阻塞并行地执行这些异步方法，<strong>通常会用的两个方法就是尽早的返回 <code>Promise</code> 和使用 <code>Promise.all()</code></strong></p><p>我们修复一下代码，把这三个方法应用到我们的例子中去。</p><h2 id="修改下代码"><a href="#修改下代码" class="headerlink" title="修改下代码"></a>修改下代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">selectPizza</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pizzaData = <span class="keyword">await</span> getPizzaData()    <span class="comment">// async call</span></span><br><span class="line">  <span class="keyword">const</span> chosenPizza = choosePizza()    <span class="comment">// sync call</span></span><br><span class="line">  <span class="keyword">await</span> addPizzaToCart(chosenPizza)    <span class="comment">// async call</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">selectDrink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> drinkData = <span class="keyword">await</span> getDrinkData()    <span class="comment">// async call</span></span><br><span class="line">  <span class="keyword">const</span> chosenDrink = chooseDrink()    <span class="comment">// sync call</span></span><br><span class="line">  <span class="keyword">await</span> addDrinkToCart(chosenDrink)    <span class="comment">// async call</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> pizzaPromise = selectPizza()</span><br><span class="line">  <span class="keyword">const</span> drinkPromise = selectDrink()</span><br><span class="line">  <span class="keyword">await</span> pizzaPromise</span><br><span class="line">  <span class="keyword">await</span> drinkPromise</span><br><span class="line">  orderItems()    <span class="comment">// async call</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Although I prefer it this way </span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.all([selectPizza(), selectDrink()]).then(orderItems)   <span class="comment">// async call</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>我们把相互依赖的语句封装在各自的函数里，现在同时去执行 <code>selectPizza()</code> 和 <code>selectDrink()</code></p><p>第二个例子中，我们需要处理未知数量的 <code>Promise</code> 。处理这种情况很简单，我们先把 Promises 放进数组，然后使用 <code>Promise.all()</code> 让他们并行执行，之后等待他们全都执行完毕。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">orderItems</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> items = <span class="keyword">await</span> getCartItems()    <span class="comment">// async call</span></span><br><span class="line">  <span class="keyword">const</span> noOfItems = items.length</span><br><span class="line">  <span class="keyword">const</span> promises = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; noOfItems; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> orderPromise = sendRequest(items[i])    <span class="comment">// async call</span></span><br><span class="line">    promises.push(orderPromise)    <span class="comment">// sync call</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)    <span class="comment">// async call</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Although I prefer it this way</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">orderItems</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> items = <span class="keyword">await</span> getCartItems()    <span class="comment">// async call</span></span><br><span class="line">  <span class="keyword">const</span> promises = items.map(<span class="function">(<span class="params">item</span>) =&gt;</span> sendRequest(item))</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)    <span class="comment">// async call</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>希望本文可以引发你对 async/await 使用的思考，也希望能帮助你提升程序的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/how-to-escape-async-await-hell/1.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://medium.freecodecamp.org/avoi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6 的 7 个小技巧</title>
    <link href="http://blog.catwen.cn/2018/02/01/7-hacks-for-es6-developers/"/>
    <id>http://blog.catwen.cn/2018/02/01/7-hacks-for-es6-developers/</id>
    <published>2018-02-01T11:19:06.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-交换值"><a href="#1-交换值" class="headerlink" title="1. 交换值"></a>1. 交换值</h2><p>使用数组的解构交换值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'world'</span>, b = <span class="string">'hello'</span></span><br><span class="line">[a, b] = [b, a]</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// -&gt; hello</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// -&gt; world</span></span><br><span class="line"><span class="comment">// Yes, it's magic</span></span><br></pre></td></tr></table></figure><h2 id="2-解构-promises-all"><a href="#2-解构-promises-all" class="headerlink" title="2. 解构 promises.all"></a>2. 解构 promises.all</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [user, account] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">  fetch(<span class="string">'/user'</span>),</span><br><span class="line">  fetch(<span class="string">'/account'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="3-调试"><a href="#3-调试" class="headerlink" title="3. 调试"></a>3. 调试</h2><p>我们都喜欢用 <code>console.log</code> 调试，这里有个小技巧（我还听说过 <code>console.table</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">5</span>, b = <span class="number">6</span>, c = <span class="number">7</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123; a, b, c &#125;)</span><br><span class="line"><span class="comment">// outputs this nice object:</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//    a: 5,</span></span><br><span class="line"><span class="comment">//    b: 6,</span></span><br><span class="line"><span class="comment">//    c: 7</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h2><p>这么写可以显得代码更加紧凑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find max value</span></span><br><span class="line"><span class="keyword">const</span> max = <span class="function">(<span class="params">arr</span>) =&gt;</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line">max([<span class="number">123</span>, <span class="number">321</span>, <span class="number">32</span>]) <span class="comment">// outputs: 321</span></span><br><span class="line"><span class="comment">// Sum array</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a + b), <span class="number">0</span>)</span><br><span class="line">sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// output: 10</span></span><br></pre></td></tr></table></figure><h2 id="5-合并数组"><a href="#5-合并数组" class="headerlink" title="5. 合并数组"></a>5. 合并数组</h2><p>可以使用展开运算符代替 <code>concat</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">const</span> two = [<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line"><span class="keyword">const</span> three = [<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br><span class="line"><span class="comment">// Old way #1</span></span><br><span class="line"><span class="keyword">const</span> result = one.concat(two, three)</span><br><span class="line"><span class="comment">// Old way #2</span></span><br><span class="line"><span class="keyword">const</span> result = [].concat(one, two, three)</span><br><span class="line"><span class="comment">// New</span></span><br><span class="line"><span class="keyword">const</span> result = [...one, ...two, ...three]</span><br></pre></td></tr></table></figure><h2 id="6-拷贝"><a href="#6-拷贝" class="headerlink" title="6. 拷贝"></a>6. 拷贝</h2><p>轻松地拷贝对象和数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; ...oldObj &#125;</span><br><span class="line"><span class="keyword">const</span> arr = [ ...oldArr ]</span><br></pre></td></tr></table></figure><p>注意：这种方式是浅拷贝</p><h2 id="7-命名参数"><a href="#7-命名参数" class="headerlink" title="7. 命名参数"></a>7. 命名参数</h2><p>使函数和调用函数更加可读</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getStuffNotBad = <span class="function">(<span class="params">id, force, verbose</span>) =&gt;</span> &#123;</span><br><span class="line">  ...do stuff</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getStuffAwesome = <span class="function">(<span class="params">&#123; id, name, force, verbose &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  ...do stuff</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Somewhere else in the codebase... WTF is true, true?</span></span><br><span class="line">getStuffNotBad(<span class="number">150</span>, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// Somewhere else in the codebase... I ❤ JS!!!</span></span><br><span class="line">getStuffAwesome(&#123; <span class="attr">id</span>: <span class="number">150</span>, <span class="attr">force</span>: <span class="literal">true</span>, <span class="attr">verbose</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-交换值&quot;&gt;&lt;a href=&quot;#1-交换值&quot; class=&quot;headerlink&quot; title=&quot;1. 交换值&quot;&gt;&lt;/a&gt;1. 交换值&lt;/h2&gt;&lt;p&gt;使用数组的解构交换值&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创建一个离线优先，数据驱动的渐进式 Web 应用程序</title>
    <link href="http://blog.catwen.cn/2018/01/30/build-an-offline-first-data-driven-pwa/"/>
    <id>http://blog.catwen.cn/2018/01/30/build-an-offline-first-data-driven-pwa/</id>
    <published>2018-01-30T14:11:11.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/build-an-offline-first-data-driven-pwa/2.png" alt="img"></p><blockquote><p>原文地址：<a href="https://codelabs.developers.google.com/codelabs/workbox-indexeddb/index.html?index=..%2F..%2Findex#0" target="_blank" rel="noopener">Build an offline-first, data-driven PWA</a><br>译文出自：<a href="/2018/01/30/build-an-offline-first-data-driven-pwa/" title="夜色镇歌的个人博客">夜色镇歌的个人博客</a></p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在本文中，您将学习如何使用 Workbox 和 IndexedDB 创建离线优先、数据驱动的渐进式Web应用程序（PWA）。在离线的情况下也可以使用后台同步功能将应用程序与服务器同步。</p><h2 id="将会学习到"><a href="#将会学习到" class="headerlink" title="将会学习到"></a>将会学习到</h2><ul><li>如何使用 Workbox 缓存应用程序</li><li>如何使用 IndexedDB 存储数据</li><li>如何在用户脱机时从 IndexedDB 中检索和显示数据</li><li>脱机时如何保存数据</li><li>如何在脱机时使用后台同步更新应用程序</li></ul><h2 id="应该了解的"><a href="#应该了解的" class="headerlink" title="应该了解的"></a>应该了解的</h2><ul><li>HTML, CSS, 和 JavaScript</li><li>ES2015 Promises</li><li>如何使用命令行</li><li>熟悉一下 Workbox </li><li>熟悉一下 Gulp </li><li>熟悉一下 IndexedDB</li></ul><h2 id="需具备的条件"><a href="#需具备的条件" class="headerlink" title="需具备的条件"></a>需具备的条件</h2><ul><li>拥有 terminal/shell 访问权限的电脑</li><li>Chrome 52 或更高版本</li><li>编辑器</li><li>Nodejs 和 npm</li></ul><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>如果你没有安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs</a> 需要安装一下</p><p>之后通过下面的方式 clone 快速启动仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/googlecodelabs/workbox-indexeddb.git</span><br></pre></td></tr></table></figure><p>或者直接下载 <a href="https://github.com/googlecodelabs/workbox-indexeddb/archive/master.zip" target="_blank" rel="noopener">压缩包</a></p><h1 id="安装依赖并启动服务"><a href="#安装依赖并启动服务" class="headerlink" title="安装依赖并启动服务"></a>安装依赖并启动服务</h1><p>到下载好的 git 仓库目录中，转到 <code>project</code> 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> workbox-indexeddb/project/</span><br></pre></td></tr></table></figure><p>然后安装依赖并启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>这个步骤中会根据 <code>package.json</code> 定义的依赖并安装，打开 <code>package.json</code> 文件查看，有很多依赖，大部分是开发环境需要的（你可以忽略），主要的依赖是：</p><ul><li><a href="https://workboxjs.org/reference-docs/latest/module-workbox-sw.html" target="_blank" rel="noopener">workbox-sw</a> Workbox</li><li><a href="https://workboxjs.org/reference-docs/latest/module-workbox-background-sync.html" target="_blank" rel="noopener">workbox-background-sync</a> 是 Workbox 用来后台同步的，稍后会提到</li><li><a href="https://gulpjs.com/" target="_blank" rel="noopener">gulp</a> 和 <a href="https://workboxjs.org/reference-docs/latest/module-workbox-build.html" target="_blank" rel="noopener">workbox-build</a> 是构建工具</li></ul><p><code>npm start</code> 会构建并输出到 <code>build</code> 文件夹，启动 dev server，并且会开启一个 <code>gulp watch</code> 任务。<code>gulp watch</code> 会监听文件的修改自动构建。<code>concurrently</code> 可以同时跑 <code>gulp</code> 和 dev server</p><h2 id="打开应用"><a href="#打开应用" class="headerlink" title="打开应用"></a>打开应用</h2><p>打开 Chrome 并且跳转到 <code>localhost:8081</code> 你会看到一个事件列表的控制台，在弹出的权限确认菜单中点击允许</p><p><img src="/images/build-an-offline-first-data-driven-pwa/1.png" alt="img"></p><p>我们使用通知系统来告知用户 app 的后台同步已经更新，试着测试一下页面底部的添加功能</p><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>这个小项目的目标是离线保存用户的事件日历。你可以查看一下 <code>app/js/main.js</code> 文件的 <code>loadContentNetworkFirst</code> 方法当前是怎么工作的，首先会请求 server，成功则更新页面，失败会在控制台打印一个信息，目前脱机是无法使用的，接下来我们添加一些方法使它脱机可用。</p><h1 id="缓存-app-shell"><a href="#缓存-app-shell" class="headerlink" title="缓存 app shell"></a>缓存 app shell</h1><h2 id="编写-service-worker"><a href="#编写-service-worker" class="headerlink" title="编写 service worker"></a>编写 service worker</h2><p>要想脱机工作，就需要 server worker，现在写一个。</p><p>把下面的代码添加到 <code>app/src/sw.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'workbox-sw.dev.v2.0.0.js'</span>);</span><br><span class="line">importScripts(<span class="string">'workbox-background-sync.dev.v2.0.0.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> workboxSW = <span class="keyword">new</span> WorkboxSW();</span><br><span class="line">workboxSW.precache([]);</span><br></pre></td></tr></table></figure><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>在开头我们引入了 <code>workbox-sw</code> 和 <code>workbox-background-sync</code></p><ul><li><code>workbox-sw</code> 包含了 <code>precache</code> 和向 service worker 添加路由的方法</li><li><code>workbox-background-sync</code> 是在 service worker 中后台同步的库，稍后会提到</li></ul><p><code>precache</code> 方法接收一个文件列表的数组，先用一个空的，下一步我们会用 <code>workbox-build</code> 去计算出这个数组的结果。</p><h2 id="构建-service-worker"><a href="#构建-service-worker" class="headerlink" title="构建 service worker"></a>构建 service worker</h2><p>推荐使用 Workbox 的构建模块，比如 <code>workbox-build</code></p><p>把下面的代码添加进 <code>project/gulpfile.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'build-sw'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> wbBuild.injectManifest(&#123;</span><br><span class="line">    swSrc: <span class="string">'app/src/sw.js'</span>,</span><br><span class="line">    swDest: <span class="string">'build/service-worker.js'</span>,</span><br><span class="line">    globDirectory: <span class="string">'build'</span>,</span><br><span class="line">    staticFileGlobs: [</span><br><span class="line">      <span class="string">'style/main.css'</span>,</span><br><span class="line">      <span class="string">'index.html'</span>,</span><br><span class="line">      <span class="string">'js/idb-promised.js'</span>,</span><br><span class="line">      <span class="string">'js/main.js'</span>,</span><br><span class="line">      <span class="string">'images/**/*.*'</span>,</span><br><span class="line">      <span class="string">'manifest.json'</span></span><br><span class="line">    ],</span><br><span class="line">    templatedUrls: &#123;</span><br><span class="line">      <span class="string">'/'</span>: [<span class="string">'index.html'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[ERROR] This happened: '</span> + err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在取消一些注释：</p><p>gulpfile.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uncomment the line below:</span></span><br><span class="line"><span class="keyword">const</span> wbBuild = <span class="built_in">require</span>(<span class="string">'workbox-build'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], cb =&gt; &#123;</span><br><span class="line">  runSequence(</span><br><span class="line">    <span class="string">'copy'</span>,</span><br><span class="line">    <span class="comment">// uncomment the line below:</span></span><br><span class="line">    <span class="string">'build-sw'</span>,</span><br><span class="line">    cb</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>保存修改，因为修改了 gulp，我们得重新跑一下，<code>Ctrl + C</code> 退出当前的进程，重新运行 <code>npm start</code>，会看到 service worker 的文件被生成在了 <code>build/service-worker.js</code></p><p>取消 <code>app/index.html</code> 中 service worker 注册代码的注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  navigator.serviceWorker.register(<span class="string">'service-worker.js'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Service Worker registration successful with scope: '</span>,</span><br><span class="line">      registration.scope);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Service Worker registration failed: '</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存修改，刷新浏览器 service worker 就会被安装。<code>Ctrl + C</code> 关闭 dev server，再返回到浏览器中刷新页面，已经可以脱机运行了！</p><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><p>在这一步中，<code>workbox-build</code> 和 <code>build-sw</code> 任务被合并到我们的 gulp 文件中，我们的构建过程是使用 <code>workbox-build</code> 库来从 <code>swSrc(app/src/sw.js)</code> 中生成 service work 到 <code>swDest(build/service-worker.js)</code>，来自 <code>globDirectory(build)</code> 的 <code>staticFileGlobs</code> 文件被注入到 <code>build/service-worker.js</code> 以供 <code>precache</code> 调用，还有每个文件的修订哈希。templatedUrls 选项告诉 Workbox 我们的站点以 index.html 的内容响应请求。</p><p>顺便贴一个 <a href="https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.injectManifest" target="_blank" rel="noopener">injectManifest</a> 的链接</p><p>安装生成好的 service worker 缓存 app shell 的资源文件，Workbox 会自动去：</p><ul><li>为缓存资源设置缓存优先策略，允许应用程序离线加载</li><li>service work 更新时，使用修订哈希来更新缓存的文件</li></ul><h1 id="创建-IndexedDB-数据库"><a href="#创建-IndexedDB-数据库" class="headerlink" title="创建 IndexedDB 数据库"></a>创建 IndexedDB 数据库</h1><p>目前为止还不能离线加载数据，我们接下来创建一个 IndexDB 来保存程序的数据，数据库命名为 <code>dashboardr</code></p><p>添加下面代码到 <code>app/js/main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIndexedDB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">'indexedDB'</span> <span class="keyword">in</span> <span class="built_in">window</span>)) &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">  <span class="keyword">return</span> idb.open(<span class="string">'dashboardr'</span>, <span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params">upgradeDb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!upgradeDb.objectStoreNames.contains(<span class="string">'events'</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> eventsOS = upgradeDb.createObjectStore(<span class="string">'events'</span>, &#123;<span class="attr">keyPath</span>: <span class="string">'id'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取消调用 <code>createIndexedDB</code> 的注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dbPromise = createIndexedDB();</span><br></pre></td></tr></table></figure><p>保存文件，重启 server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>回到浏览器刷新页面，激活 <a href="https://developers.google.com/web/ilt/pwa/tools-for-pwa-developers#chromeupdate" target="_blank" rel="noopener">skipWaiting</a> 并再次刷新页面，在 Chrome 中，你可以在开发者工具中的 <code>Application</code> 面板中选择 <code>Service Workers</code> 点击 <code>skipWaiting</code>，之后使用 <a href="https://developers.google.com/web/ilt/pwa/tools-for-pwa-developers#indexeddb" target="_blank" rel="noopener">开发者工具</a> 检查数据库是否存在。在 Chrome 中你可以在 <code>Application</code> 面板中点击 <code>IndexedDB</code> 选择 <code>dashboardr</code> 查看 <code>events</code> 对象是否存在。</p><blockquote><p>注意：开发者工具的 IndexedDB UI 可能不会准确的反应你数据库的情况，在 Chrome 中你可以刷新数据库查看，或者重新打开开发者工具</p></blockquote><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><p>在上面的代码中，我们创建了一个 dashboardr 数据库，并把他的版本号设置为 <code>1</code> ，然后检查 events 对象是否存在，这个检查是为了避免潜在的错误，我们还给 event 提供了一个唯一的 key path <code>id</code>。</p><p>由于我们修改了 <code>app/main.js</code> 文件，gulp 的 <code>watch</code> 任务会自动构建，Workbox 会自动更新修订哈希，然后智能更新缓存中的 <code>main.js</code>。</p><h1 id="保存数据到-IndexedDB-中"><a href="#保存数据到-IndexedDB-中" class="headerlink" title="保存数据到 IndexedDB 中"></a>保存数据到 IndexedDB 中</h1><p>现在我们保存数据到刚创建的数据库 <code>dashboardr</code> 中的 <code>event</code> 对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveEventDataLocally</span>(<span class="params">events</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">'indexedDB'</span> <span class="keyword">in</span> <span class="built_in">window</span>)) &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">  <span class="keyword">return</span> dbPromise.then(<span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tx = db.transaction(<span class="string">'events'</span>, <span class="string">'readwrite'</span>);</span><br><span class="line">    <span class="keyword">const</span> store = tx.objectStore(<span class="string">'events'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(events.map(<span class="function"><span class="params">event</span> =&gt;</span> store.put(event)))</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      tx.abort();</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'Events were not added to the store'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后更新 <code>loadContentNetworkFirst</code> 方法，现在这是完整的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadContentNetworkFirst</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getServerData()</span><br><span class="line">  .then(<span class="function"><span class="params">dataFromNetwork</span> =&gt;</span> &#123;</span><br><span class="line">    updateUI(dataFromNetwork);</span><br><span class="line">    saveEventDataLocally(dataFromNetwork)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setLastUpdated(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">      messageDataSaved();</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      messageSaveError(); </span><br><span class="line">      <span class="built_in">console</span>.warn(err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="comment">// if we can't connect to the server...</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Network requests have failed, this is expected if offline'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取消注释 <code>addAndPostEvent</code> 中的 <code>saveEventDataLocally</code> 调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAndPostEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  saveEventDataLocally([data]);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件，刷新页面重新激活 service worker。再次刷新页面，检查一下来自网络的数据是否被保存到 <code>events</code> 中去（你可能需要刷新一下开发者工具中的 <code>IndexedDB</code>）</p><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><p><code>saveEventDataLocally</code> 接收一个数组并一条条的保存到 IndexedDB 数据库中，我们把 <code>store.put</code> 写在了 <code>Promise.all</code> 中，这样如果某一条更新出错我们就可以终止事务。</p><p><code>loadContentNetworkFirst</code> 方法中，一旦收到来自服务器的数据，就会更新 IndexedDB 和页面。然后，数据成功保存时，将存储时间戳，并通知用户数据可供离线使用。</p><p>在<code>addAndPostEvent</code> 中调用 <code>saveEventDataLocally</code> 方法保证了添加新的 <code>event</code> 时本地会存有最新的数据。 </p><h1 id="从-IndexedDB-中获取数据"><a href="#从-IndexedDB-中获取数据" class="headerlink" title="从 IndexedDB 中获取数据"></a>从 IndexedDB 中获取数据</h1><p>离线的时候，我们就要查询本地缓存的数据。</p><p>添加下面的代码到 <code>app/js/main.js</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocalEventData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">'indexedDB'</span> <span class="keyword">in</span> <span class="built_in">window</span>)) &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">  <span class="keyword">return</span> dbPromise.then(<span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tx = db.transaction(<span class="string">'events'</span>, <span class="string">'readonly'</span>);</span><br><span class="line">    <span class="keyword">const</span> store = tx.objectStore(<span class="string">'events'</span>);</span><br><span class="line">    <span class="keyword">return</span> store.getAll();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后更新 <code>loadContentNetworkFirst</code> 方法，完整的方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadContentNetworkFirst</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getServerData()</span><br><span class="line">  .then(<span class="function"><span class="params">dataFromNetwork</span> =&gt;</span> &#123;</span><br><span class="line">    updateUI(dataFromNetwork);</span><br><span class="line">    saveEventDataLocally(dataFromNetwork)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setLastUpdated(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">      messageDataSaved();</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      messageSaveError();</span><br><span class="line">      <span class="built_in">console</span>.warn(err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Network requests have failed, this is expected if offline'</span>);</span><br><span class="line">    getLocalEventData()</span><br><span class="line">    .then(<span class="function"><span class="params">offlineData</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!offlineData.length) &#123;</span><br><span class="line">        messageNoData();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        messageOffline();</span><br><span class="line">        updateUI(offlineData); </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件，刷新浏览器激活更新的 service worker，现在 <code>Ctrl + C</code> 关闭 dev server，返回到浏览器中刷新页面，现在 app 和数据都可以离线加载了！</p><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><p><code>loadContentNetworkFirst</code> 被调用的时候如果没有网络连接，<code>getServerData</code> 会被 reject，之后便会进入到 <code>catch</code> 中去，然后 <code>getLocalEventData</code> 会调用本地缓存的数据。有网络连接的话会正常的请求 server 并且 <code>updateUI</code></p><h1 id="使用-workbox-background-sync"><a href="#使用-workbox-background-sync" class="headerlink" title="使用 workbox-background-sync"></a>使用 workbox-background-sync</h1><p>我们的 app 已经可以离线保存和浏览数据，现在我们来用 <code>workbox-background-sync</code> 把离线状态下保存的数据同步到服务端去。</p><p>把下面的的代码添加到 <code>app/src/sw.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bgQueue = <span class="keyword">new</span> workbox.backgroundSync.QueuePlugin(&#123;</span><br><span class="line">  callbacks: &#123;</span><br><span class="line">    replayDidSucceed: <span class="keyword">async</span>(hash, res) =&gt; &#123;</span><br><span class="line">      self.registration.showNotification(<span class="string">'Background sync demo'</span>, &#123;</span><br><span class="line">        body: <span class="string">'Events have been updated!'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workboxSW.router.registerRoute(<span class="string">'/api/add'</span>,</span><br><span class="line">  workboxSW.strategies.networkOnly(&#123;<span class="attr">plugins</span>: [bgQueue]&#125;), <span class="string">'POST'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>保存，现在转到命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>刷新浏览器，激活更新的 service worker</p><p><code>Ctrl + C</code> 把 app 变为离线状态，添加一个 <code>event</code> 确认请求 <code>/api/add</code> 已经被添加进 <code>bgQueueSyncDB</code> 的 <code>QueueStore</code> 对象。</p><h4 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h4><p>当用户试图在离线情况下添加 <code>event</code> 的时候，<code>workbox-background-sync</code> 会把失败的请求保存为一个离线队列，当用户重新联网 <code>backgroundSync</code> 会重新发送这些请求，甚至都不需要用户打开 app！但是，从联网到重新发请求的这个过程大概需要 5 分钟，下一节我们将会介绍如何在 app 中立即发送这些请求。</p><h1 id="重发请求"><a href="#重发请求" class="headerlink" title="重发请求"></a>重发请求</h1><p>因为重发请求会有延迟，所以用户可能回到 app 之后还没有同步数据，所以我们在用户联网的时候立即发送这些请求。</p><p>把下面的代码添加到 <code>app/src/sw.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">workboxSW.router.registerRoute(<span class="string">'/api/getAll'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> bgQueue.replayRequests().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">'/api/getAll'</span>);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只要用户请求服务端数据（加载或刷新页面时），该路由就会 replay 排队的请求，然后返回最新的服务端数据。这很好，但是用户还是得刷新页面去重新获取数据，我们还有更好的做法。</p><p>把下面的代码添加进 <code>app/js/main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'online'</span>, () =&gt; &#123;</span><br><span class="line">  container.innerHTML = <span class="string">''</span>;</span><br><span class="line">  loadContentNetworkFirst();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>重启 server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>刷新浏览器激活新的 service worker，并再次刷新页面。</p><p><code>Ctrl + C</code> 把 app 变为离线状态</p><p>添加一条 <code>event</code></p><p>重启 server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>这时你应该能立即收到一条数据更新的通知，检查 <code>server-data/events.json</code> 中的数据是否已经更新。</p><h4 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h4><p>页面加载的时候会请求 <code>/api/getAll</code>，我们拦截了这个请求，之后主要做了两件事：</p><ul><li>同步本地的离线数据</li><li>重新请求 <code>/api/getAll</code></li></ul><p>也就是在重新获取服务端的数据之前先同步</p><blockquote><p>注意：本例中的网络请求设计的非常简单，实际情况下你可能需要考虑更多因素去减少请求的数量。</p></blockquote><h1 id="添加删除功能"><a href="#添加删除功能" class="headerlink" title="添加删除功能"></a>添加删除功能</h1><p>下面的时间就交给你了，添加一个删除的功能，记得删除 IndexedDB 中的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/build-an-offline-first-data-driven-pwa/2.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://codelabs.developers.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我们编写 React 组件的最佳实践</title>
    <link href="http://blog.catwen.cn/2018/01/18/best-practices-for-writing-react-components/"/>
    <id>http://blog.catwen.cn/2018/01/18/best-practices-for-writing-react-components/</id>
    <published>2018-01-18T16:55:03.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/best-practices-for-writing-react-components/1.png" alt="img"></p><p>刚接触 <code>React</code> 的时候，在一个又一个的教程上面看到很多种编写组件的方法，尽管那时候 <code>React</code> 框架已经相当成熟，但是并没有一个固定的规则去规范我们去写代码。</p><p>在过去的一年里，我们在不断的完善我们的做法，直到满意为止。</p><p>本文会列出我们自己在使用的最佳实践，不管你是刚入门的新手还是很有经验的开发者，我们都希望本文对你有所帮助。</p><p>开始之前，先列几条：</p><ul><li>我们使用ES6/ES7</li><li>如果你无法区分页面组件和容器组件，推荐阅读 <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.kuvqndiqq" target="_blank" rel="noopener">这篇文章</a>（需要梯子）</li><li>如果有更好的意见或建议，请在评论区告诉我，谢谢</li></ul><h1 id="基于-Class-的组件"><a href="#基于-Class-的组件" class="headerlink" title="基于 Class 的组件"></a>基于 Class 的组件</h1><p>基于 Class 的组件是有状态的，不管它包不包含函数，我们都会尽量少用。但是它也有它的用处。</p><p>现在来一行一行的编写我们的组件：</p><h2 id="导入-CSS"><a href="#导入-CSS" class="headerlink" title="导入 CSS"></a>导入 CSS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> ExpandableForm <span class="keyword">from</span> <span class="string">'./ExpandableForm'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/ProfileContainer.css'</span></span><br></pre></td></tr></table></figure><p>我喜欢 <code>CSS in Javascript</code>，但是这个概念还比较新，现在也并没有成熟的解决方案，所以我们在每个组件里面去引用 CSS </p><h2 id="初始化-State"><a href="#初始化-State" class="headerlink" title="初始化 State"></a>初始化 State</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> ExpandableForm <span class="keyword">from</span> <span class="string">'./ExpandableForm'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/ProfileContainer.css'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">expanded</span>: <span class="literal">false</span> &#125;</span><br></pre></td></tr></table></figure><p>当然你也可以选择在构造函数里面去初始化，但是我们觉得这种方式更加清晰。</p><p>当然也会保证 Class 是默认导出的。</p><h2 id="propTypes-和-defaultProps"><a href="#propTypes-和-defaultProps" class="headerlink" title="propTypes 和 defaultProps"></a>propTypes 和 defaultProps</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; string, object &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> ExpandableForm <span class="keyword">from</span> <span class="string">'./ExpandableForm'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/ProfileContainer.css'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">expanded</span>: <span class="literal">false</span> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    model: object.isRequired,</span><br><span class="line">    title: string</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    model: &#123;</span><br><span class="line">      id: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    title: <span class="string">'Your Name'</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>propTypes 和 defaultProps 是静态属性，尽可能的把它们写在组件的最上方，以便其他开发者阅读。</p><p>如果使用 <code>React 15.3.0</code> 或更高的版本，使用 <a href="https://github.com/facebook/prop-types" target="_blank" rel="noopener">prop-types</a> 代替 <code>React.PropTypes</code></p><p>所有的组件都必须声明 propTypes</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; string, object &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> ExpandableForm <span class="keyword">from</span> <span class="string">'./ExpandableForm'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/ProfileContainer.css'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">expanded</span>: <span class="literal">false</span> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    model: object.isRequired,</span><br><span class="line">    title: string</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    model: &#123;</span><br><span class="line">      id: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    title: <span class="string">'Your Name'</span></span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">this</span>.props.model.save()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleNameChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.model.changeName(e.target.value)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleExpand = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">expanded</span>: !<span class="keyword">this</span>.state.expanded &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>使用基于 Class 的组件时，当你传递函数给子组件的时候，要确保他们有正确的 <code>this</code>，通常用这种形式实现 <code>this.handleSubmit.bind(this)</code></p><p>但是如果你使用箭头函数，就不需要 <code>bind(this)</code></p><h2 id="为-setState-传递函数"><a href="#为-setState-传递函数" class="headerlink" title="为 setState 传递函数"></a>为 setState 传递函数</h2><p>上面的例子中我们是这么做的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">expanded</span>: !<span class="keyword">this</span>.state.expanded &#125;)</span><br></pre></td></tr></table></figure><p>这里有个 setState 的小知识 —— 它是异步的，为了保证性能，<code>React</code> 会分批修改 state，所以 state 不会在调用 setState 之后立即改变</p><p>这意味着你不能依赖当前的状态，因为你不知道当前的状态是什么状态</p><p>这里有个解决方案 —— 传递函数给 setState，<code>React</code> 会把上一个状态 <code>prevState</code> 传递给你</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123; <span class="attr">expanded</span>: !prevState.expanded &#125;))</span><br></pre></td></tr></table></figure><h2 id="解构-Props"><a href="#解构-Props" class="headerlink" title="解构 Props"></a>解构 Props</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; string, object &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> ExpandableForm <span class="keyword">from</span> <span class="string">'./ExpandableForm'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/ProfileContainer.css'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">expanded</span>: <span class="literal">false</span> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    model: object.isRequired,</span><br><span class="line">    title: string</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    model: &#123;</span><br><span class="line">      id: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    title: <span class="string">'Your Name'</span></span><br><span class="line">  &#125;</span><br><span class="line">handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">this</span>.props.model.save()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleNameChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.model.changeName(e.target.value)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleExpand = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123; <span class="attr">expanded</span>: !prevState.expanded &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      model,</span><br><span class="line">      title</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> ( </span><br><span class="line">      &lt;ExpandableForm </span><br><span class="line">        onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125; </span><br><span class="line">        expanded=&#123;<span class="keyword">this</span>.state.expanded&#125; </span><br><span class="line">        onExpand=&#123;<span class="keyword">this</span>.handleExpand&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;&#123;title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input</span></span><br><span class="line"><span class="regexp">            type="text"</span></span><br><span class="line"><span class="regexp">            value=&#123;model.name&#125;</span></span><br><span class="line"><span class="regexp">            onChange=&#123;this.handleNameChange&#125;</span></span><br><span class="line"><span class="regexp">            placeholder="Your Name"/</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ExpandableForm&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像上面的例子一样，每个 prop 都独占一行</p><h2 id="装饰器-Decorators"><a href="#装饰器-Decorators" class="headerlink" title="装饰器(Decorators)"></a>装饰器(Decorators)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>如果你使用了类似 <a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener">mobx</a> 的库，你可以这样去装饰你的 Class 组件</p><p>修改函数式组件使用 <a href="http://javascript.info/tutorial/decorators" target="_blank" rel="noopener">decorators</a> 很灵活并且可读</p><p>如果你不想使用装饰器，可以这么做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Component code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> observer(ProfileContainer)</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>避免像下面注释的地方一样传递新的闭包给子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  type=<span class="string">"text"</span></span><br><span class="line">  value=&#123;model.name&#125;</span><br><span class="line">  <span class="comment">// onChange=&#123;(e) =&gt; &#123; model.name = e.target.value &#125;&#125;</span></span><br><span class="line">  <span class="comment">// ^ Not this. Use the below:</span></span><br><span class="line">  onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">  placeholder=<span class="string">"Your Name"</span>/&gt;</span><br></pre></td></tr></table></figure><p>这种方式的好处是每次render，不会重新创建一个函数，没有额外的性能损失。</p><p>这里是完整的组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; string, object &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="comment">// Separate local imports from dependencies</span></span><br><span class="line"><span class="keyword">import</span> ExpandableForm <span class="keyword">from</span> <span class="string">'./ExpandableForm'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/ProfileContainer.css'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use decorators if needed</span></span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">expanded</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  <span class="comment">// Initialize state here (ES7) or in a constructor method (ES6)</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Declare propTypes as static properties as early as possible</span></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    model: object.isRequired,</span><br><span class="line">    title: string</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Default props below propTypes</span></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    model: &#123;</span><br><span class="line">      id: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    title: <span class="string">'Your Name'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use fat arrow functions for methods to preserve context (this will thus be the component instance)</span></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">this</span>.props.model.save()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleNameChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.model.name = e.target.value</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleExpand = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123; <span class="attr">expanded</span>: !prevState.expanded &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// Destructure props for readability</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      model,</span><br><span class="line">      title</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> ( </span><br><span class="line">      &lt;ExpandableForm </span><br><span class="line">        onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125; </span><br><span class="line">        expanded=&#123;<span class="keyword">this</span>.state.expanded&#125; </span><br><span class="line">        onExpand=&#123;<span class="keyword">this</span>.handleExpand&#125;&gt;</span><br><span class="line">        <span class="comment">// Newline props if there are more than two</span></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;&#123;title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input</span></span><br><span class="line"><span class="regexp">            type="text"</span></span><br><span class="line"><span class="regexp">            value=&#123;model.name&#125;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ onChange=&#123;(e) =&gt; &#123; model.name = e.target.value &#125;&#125;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ Avoid creating new closures in the render method- use methods like below</span></span><br><span class="line"><span class="regexp">            onChange=&#123;this.handleNameChange&#125;</span></span><br><span class="line"><span class="regexp">            placeholder="Your Name"/</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ExpandableForm&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h1><p>这些组件没有状态和函数，他们很纯，非常容易阅读，尽量多的使用他们。</p><h2 id="propTypes"><a href="#propTypes" class="headerlink" title="propTypes"></a>propTypes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; func, bool &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/Form.css'</span></span><br><span class="line">ExpandableForm.propTypes = &#123;</span><br><span class="line">  onSubmit: func.isRequired,</span><br><span class="line">  expanded: bool</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Component declaration</span></span><br></pre></td></tr></table></figure><p>这里我们把 propTypes 写在最前面，他会被组件立即可见，这要归功于JavaScript的 <code>函数提升</code></p><h2 id="解构-Props-和-defaultProps"><a href="#解构-Props-和-defaultProps" class="headerlink" title="解构 Props 和 defaultProps"></a>解构 Props 和 defaultProps</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; func, bool &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/Form.css'</span></span><br><span class="line">ExpandableForm.propTypes = &#123;</span><br><span class="line">  onSubmit: func.isRequired,</span><br><span class="line">  expanded: bool,</span><br><span class="line">  onExpand: func.isRequired</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExpandableForm</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> formStyle = props.expanded ? &#123;<span class="attr">height</span>: <span class="string">'auto'</span>&#125; : &#123;<span class="attr">height</span>: <span class="number">0</span>&#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form style=&#123;formStyle&#125; onSubmit=&#123;props.onSubmit&#125;&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">      &lt;button onClick=&#123;props.onExpand&#125;&gt;Expand&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的组件是一个函数，我们获取他的 props 就是在获取函数的参数值，我们可以直接用 <code>ES6</code> 的解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; func, bool &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/Form.css'</span></span><br><span class="line">ExpandableForm.propTypes = &#123;</span><br><span class="line">  onSubmit: func.isRequired,</span><br><span class="line">  expanded: bool,</span><br><span class="line">  onExpand: func.isRequired</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExpandableForm</span>(<span class="params">&#123; onExpand, expanded = false, children, onSubmit &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> formStyle = expanded ? &#123;<span class="attr">height</span>: <span class="string">'auto'</span>&#125; : &#123;<span class="attr">height</span>: <span class="number">0</span>&#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form style=&#123;formStyle&#125; onSubmit=&#123;onSubmit&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">      &lt;button onClick=&#123;onExpand&#125;&gt;Expand&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以使用默认参数值去设置 <code>defaultProps</code>，就像上面的 <code>expanded = false</code></p><p>避免使用下面的 ES6 语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExpandableForm = <span class="function">(<span class="params">&#123; onExpand, expanded, children &#125;</span>) =&gt;</span> &#123;</span><br></pre></td></tr></table></figure><p>看起来很先（逼）进（格），但这个函数是匿名的。</p><p>如果你的Babel设置正确，这个匿名函数不会成为一个问题 —— 但是如果不是的话，任何错误都会显示在 <code>&lt;&lt; anonymous &gt;&gt;</code> 中，这对于调试来说是非常糟糕的。</p><h2 id="Wrapping"><a href="#Wrapping" class="headerlink" title="Wrapping"></a>Wrapping</h2><p>函数式组件中不能使用 <code>decorators</code>，你只需把它作为参数传递给过去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; func, bool &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/Form.css'</span></span><br><span class="line">ExpandableForm.propTypes = &#123;</span><br><span class="line">  onSubmit: func.isRequired,</span><br><span class="line">  expanded: bool,</span><br><span class="line">  onExpand: func.isRequired</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExpandableForm</span>(<span class="params">&#123; onExpand, expanded = false, children, onSubmit &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> formStyle = expanded ? &#123;<span class="attr">height</span>: <span class="string">'auto'</span>&#125; : &#123;<span class="attr">height</span>: <span class="number">0</span>&#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form style=&#123;formStyle&#125; onSubmit=&#123;onSubmit&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">      &lt;button onClick=&#123;onExpand&#125;&gt;Expand&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> observer(ExpandableForm)</span><br></pre></td></tr></table></figure><p>这里是完整的组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; func, bool &#125; <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="comment">// Separate local imports from dependencies</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/Form.css'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare propTypes here, before the component (taking advantage of JS function hoisting)</span></span><br><span class="line"><span class="comment">// You want these to be as visible as possible</span></span><br><span class="line">ExpandableForm.propTypes = &#123;</span><br><span class="line">  onSubmit: func.isRequired,</span><br><span class="line">  expanded: bool,</span><br><span class="line">  onExpand: func.isRequired</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destructure props like so, and use default arguments as a way of setting defaultProps</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExpandableForm</span>(<span class="params">&#123; onExpand, expanded = false, children, onSubmit &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> formStyle = expanded ? &#123; <span class="attr">height</span>: <span class="string">'auto'</span> &#125; : &#123; <span class="attr">height</span>: <span class="number">0</span> &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form style=&#123;formStyle&#125; onSubmit=&#123;onSubmit&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">      &lt;button onClick=&#123;onExpand&#125;&gt;Expand&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrap the component instead of decorating it</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> observer(ExpandableForm)</span><br></pre></td></tr></table></figure><h2 id="JSX-中的条件判断"><a href="#JSX-中的条件判断" class="headerlink" title="JSX 中的条件判断"></a>JSX 中的条件判断</h2><p>你可能会有很复杂的条件判断语句，但是你要避免下面的写法：</p><p><img src="/images/best-practices-for-writing-react-components/2.png" alt="img"></p><p>嵌套的三元表达式不是一个好的方法，太难阅读了</p><p>有一些库可以解决这个问题(<a href="https://github.com/AlexGilleran/jsx-control-statements" target="_blank" rel="noopener">jsx-control-statements</a>)，但是我们没有引入其他的库，我们是这么解决的：</p><p><img src="/images/best-practices-for-writing-react-components/3.png" alt="img"></p><p>我们使用了 <a href="https://stackoverflow.com/questions/8228281/what-is-the-function-construct-in-javascript" target="_blank" rel="noopener">立即执行函数</a> 把条件语句写在里面，虽然这样可能会导致性能下降，但是在大多数情况下，它带来的负面影响还是小于糟糕的可读性。</p><p>当然如果组件分的足够细，你可能不会用到这么复杂的条件判断。</p><p>此外，如果你只在一个表达式里面去渲染组件，避免这么做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  isTrue</span><br><span class="line">   ? &lt;p&gt;True!&lt;/p&gt;</span><br><span class="line">   : &lt;none/&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以使用短路语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  isTrue &amp;&amp; </span><br><span class="line">    &lt;p&gt;True!&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章对你有帮助吗？请在评论区给出你的意见和建议，感谢阅读！</p><p><a href="https://engineering.musefind.com/our-best-practices-for-writing-react-components-dec3eb5c3fc8" target="_blank" rel="noopener">原文链接</a>，另外推荐一个我前阵子写的一个脚手架 <a href="https://github.com/wenpengfei/parcel-typescript-react-boilerplate" target="_blank" rel="noopener">parcel-typescript-react-boilerplate</a>，请给出意见和建议，相互学习。顺便给个星，谢谢~~！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/best-practices-for-writing-react-components/1.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;刚接触 &lt;code&gt;React&lt;/code&gt; 的时候，在一个又一个的教程上面看到很多种编写组件的方法
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Parcel、Typescript、Mobx撸一个简单的React脚手架</title>
    <link href="http://blog.catwen.cn/2018/01/15/typescript-parcel-react-mobx/"/>
    <id>http://blog.catwen.cn/2018/01/15/typescript-parcel-react-mobx/</id>
    <published>2018-01-15T09:29:20.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/wenpengfei/parcel-typescript-react-boilerplate" target="_blank" rel="noopener">parcel-typescript-react-boilerplate</a> 欢迎批评指正，顺手点个星呗，另外赠送一个代码生成器，根据表结构生成<code>单表</code>的CURD页面，然后根据实际的业务手动修改即可：<a href="https://github.com/wenpengfei/react-admin-generator" target="_blank" rel="noopener">react-admin-generator</a></p><h2 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h2><p>2017年底给开发者最大的惊喜非 <code>Parcel</code> 莫属了，使用过 <code>Webpack</code> 的同学都会有配置太过复杂的感受，甚至 <code>Webpack</code> 的维护者有时候做项目也会 <code>copy</code> 一些常用的配置。如果使用 <code>Parcel</code>，仅仅定义好 index.html、index.js和index.css 它就会为我们做好一切的打包工作，就像没有使用过任何打包工具一样，这样就很舒服。</p><p><code>Webpack</code> 虽然复杂，但是很灵活，功能很全，<code>Parcel</code> 也需要为零配置付出很多代价，我们期待它更加完善。</p><h2 id="Mobx"><a href="#Mobx" class="headerlink" title="Mobx"></a>Mobx</h2><p>状态管理是前端开发很重要的一个话题，在开发 <code>React</code> 应用的时候默认的状态管理肯定会选择 <code>Redux</code> 了，但是我选择使用 <code>Mobx</code>，<code>Redux</code> 受到函数式编程的影响，但很多人都有面向对象语言的背景，在刚开始的时候很难适应函数式编程的原则。所以 <code>Mobx</code> 对初学者更加友好。</p><p><code>Mobx</code> 的原则很简单：任何源自应用状态的东西都应该自动地获得。怎么理解？比如我有一个变量 <code>a</code>，我的应用订阅了这个变量，当 <code>a</code> 改变的时候我的应用会自动收到最新的值。在 <code>React</code> 中的这个变量就是 <code>state</code>，当 <code>state</code> 改变，<code>mobx-react</code> 就会重新渲染视图。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="核心库"><a href="#核心库" class="headerlink" title="核心库"></a>核心库</h3><ul><li><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">typescript</a></li><li><a href="https://reactjs.org/" target="_blank" rel="noopener">react@v16</a></li><li><a href="https://reacttraining.com/react-router/" target="_blank" rel="noopener">react-router@v4</a></li><li><a href="https://mobx.js.org/index.html" target="_blank" rel="noopener">mobx</a></li><li><a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener">mobx-react</a></li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://parceljs.org" target="_blank" rel="noopener">parcel</a></li><li><a href="https://palantir.github.io/tslint/" target="_blank" rel="noopener">tslint</a></li><li><a href="https://stylelint.io/" target="_blank" rel="noopener">stylelint</a></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│   ├── app.scss</span><br><span class="line">│   ├── app.tsx                      # 入口文件</span><br><span class="line">│   ├── pages.tsx                    # 模板页</span><br><span class="line">│   ├── routes.ts                    # 菜单</span><br><span class="line">│   ├── assets                       # 资源文件</span><br><span class="line">│   │   └── logo.svg</span><br><span class="line">│   ├── components                   # 组件目录</span><br><span class="line">│   │   ├── content-container        # 页面container，定义了淡入动画</span><br><span class="line">│   │   │   └── index.tsx   </span><br><span class="line">│   │   ├── index.tsx                # components 入口文件</span><br><span class="line">│   │   ├── layout                   # 布局页</span><br><span class="line">│   │   │   ├── index.scss</span><br><span class="line">│   │   │   └── index.tsx</span><br><span class="line">│   │   ├── login-form               # 登陆组件</span><br><span class="line">│   │   │   ├── index.scss</span><br><span class="line">│   │   │   └── index.tsx</span><br><span class="line">│   │   └── router-link</span><br><span class="line">│   │       └── index.tsx</span><br><span class="line">│   ├── service                      # api</span><br><span class="line">│   │   ├── base.ts</span><br><span class="line">│   │   ├── index.ts                 # api 入口文件</span><br><span class="line">│   │   └── user</span><br><span class="line">│   │       └── index.ts</span><br><span class="line">│   ├── stores                       # mobx store</span><br><span class="line">│   │   ├── app</span><br><span class="line">│   │   │   └── index.ts</span><br><span class="line">│   │   ├── base.ts</span><br><span class="line">│   │   ├── index.ts                 # store 入口文件 </span><br><span class="line">│   │   ├── member</span><br><span class="line">│   │   │   └── index.ts</span><br><span class="line">│   │   └── user</span><br><span class="line">│   │       └── index.ts</span><br><span class="line">│   ├── utils                        # 工具类</span><br><span class="line">│   │   ├── auth.ts</span><br><span class="line">│   │   ├── fetch.ts</span><br><span class="line">│   │   ├── index.ts                 # 工具类入口文件</span><br><span class="line">│   │   └── validator.ts</span><br><span class="line">│   └── views                        # 页面</span><br><span class="line">│       ├── index.ts</span><br><span class="line">│       ├── login</span><br><span class="line">│       │   └── index.tsx</span><br><span class="line">│       ├── member</span><br><span class="line">│       │   └── index.tsx</span><br><span class="line">│       ├── not-found</span><br><span class="line">│       │   └── index.tsx</span><br><span class="line">│       └── user</span><br><span class="line">│           ├── add.tsx</span><br><span class="line">│           ├── edit.tsx</span><br><span class="line">│           ├── form.tsx</span><br><span class="line">│           ├── index.tsx</span><br><span class="line">│           ├── list.tsx</span><br><span class="line">│           └── table.tsx</span><br><span class="line">├── index.html</span><br><span class="line">├── tsconfig.json</span><br><span class="line">├── tslint.json</span><br><span class="line">├── yarn-error.log</span><br><span class="line">└── yarn.lock</span><br><span class="line">├── README.md</span><br><span class="line">├── package.json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/wenpengfei/parcel-typescript-react-boilerplate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;parcel-typescript-react-b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript代码段合集</title>
    <link href="http://blog.catwen.cn/2017/12/19/30-seconds-of-code/"/>
    <id>http://blog.catwen.cn/2017/12/19/30-seconds-of-code/</id>
    <published>2017-12-19T11:06:23.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/30-seconds-of-code/1.png" alt="img"></p><blockquote><p>花30秒或者更短的时间就能理解的Javascript代码段</p></blockquote><ul><li>可以使用<code>Ctrl + F</code> 或者 <code>command + F</code>搜索</li><li>代码段使用ES6编写，使用 <a href="https://babeljs.io/" target="_blank" rel="noopener">Babel transpiler</a> 保证兼容.</li><li>作者在持续更新<a href="https://github.com/Chalarangelo/30-seconds-of-code" target="_blank" rel="noopener">传送门</a></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul><li><a href="#arrayMax"><code>arrayMax</code></a></li><li><a href="#arrayMin"><code>arrayMin</code></a></li><li><a href="#chunk"><code>chunk</code></a></li><li><a href="#compact"><code>compact</code></a></li><li><a href="#countOccurrences"><code>countOccurrences</code></a></li><li><a href="#deepFlatten"><code>deepFlatten</code></a></li><li><a href="#difference"><code>difference</code></a></li><li><a href="#distinctValuesOfArray"><code>distinctValuesOfArray</code></a></li><li><a href="#dropElements"><code>dropElements</code></a></li><li><a href="#everyNth"><code>everyNth</code></a></li><li><a href="#filterNonUnique"><code>filterNonUnique</code></a></li><li><a href="#flatten"><code>flatten</code></a></li><li><a href="#flattenDepth"><code>flattenDepth</code></a></li><li><a href="#groupBy"><code>groupBy</code></a></li><li><a href="#head"><code>head</code></a></li><li><a href="#initial"><code>initial</code></a></li><li><a href="#initializeArrayWithRange"><code>initializeArrayWithRange</code></a></li><li><a href="#initializeArrayWithValues"><code>initializeArrayWithValues</code></a></li><li><a href="#intersection"><code>intersection</code></a></li><li><a href="#last"><code>last</code></a></li><li><a href="#mapObject"><code>mapObject</code></a></li><li><a href="#nthElement"><code>nthElement</code></a></li><li><a href="#pick"><code>pick</code></a></li><li><a href="#pull"><code>pull</code></a></li><li><a href="#remove"><code>remove</code></a></li><li><a href="#sample"><code>sample</code></a></li><li><a href="#shuffle"><code>shuffle</code></a></li><li><a href="#similarity"><code>similarity</code></a></li><li><a href="#symmetricDifference"><code>symmetricDifference</code></a></li><li><a href="#tail"><code>tail</code></a></li><li><a href="#take"><code>take</code></a></li><li><a href="#takeRight"><code>takeRight</code></a></li><li><a href="#union"><code>union</code></a></li><li><a href="#without"><code>without</code></a></li><li><a href="#zip"><code>zip</code></a></li></ul><h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><ul><li><a href="#bottomVisible"><code>bottomVisible</code></a></li><li><a href="#currentURL"><code>currentURL</code></a></li><li><a href="#elementIsVisibleInViewport"><code>elementIsVisibleInViewport</code></a></li><li><a href="#getScrollPosition"><code>getScrollPosition</code></a></li><li><a href="#getURLParameters"><code>getURLParameters</code></a></li><li><a href="#redirect"><code>redirect</code></a></li><li><a href="#scrollToTop"><code>scrollToTop</code></a></li></ul><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><ul><li><a href="#getDaysDiffBetweenDates"><code>getDaysDiffBetweenDates</code></a></li><li><a href="#JSONToDate"><code>JSONToDate</code></a></li><li><a href="#toEnglishDate"><code>toEnglishDate</code></a></li></ul><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ul><li><a href="#chainAsync"><code>chainAsync</code></a></li><li><a href="#compose"><code>compose</code></a></li><li><a href="#curry"><code>curry</code></a></li><li><a href="#functionName"><code>functionName</code></a></li><li><a href="#pipe"><code>pipe</code></a></li><li><a href="#promisify"><code>promisify</code></a></li><li><a href="#runPromisesInSeries"><code>runPromisesInSeries</code></a></li><li><a href="#sleep"><code>sleep</code></a></li></ul><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><ul><li><a href="#arrayAverage"><code>arrayAverage</code></a></li><li><a href="#arraySum"><code>arraySum</code></a></li><li><a href="#collatz"><code>collatz</code></a></li><li><a href="#digitize"><code>digitize</code></a></li><li><a href="#distance"><code>distance</code></a></li><li><a href="#factorial"><code>factorial</code></a></li><li><a href="#fibonacci"><code>fibonacci</code></a></li><li><a href="#gcd"><code>gcd</code></a></li><li><a href="#hammingDistance"><code>hammingDistance</code></a></li><li><a href="#isDivisible"><code>isDivisible</code></a></li><li><a href="#isEven"><code>isEven</code></a></li><li><a href="#lcm"><code>lcm</code></a></li><li><a href="#median"><code>median</code></a></li><li><a href="#palindrome"><code>palindrome</code></a></li><li><a href="#percentile"><code>percentile</code></a></li><li><a href="#powerset"><code>powerset</code></a></li><li><a href="#randomIntegerInRange"><code>randomIntegerInRange</code></a></li><li><a href="#randomNumberInRange"><code>randomNumberInRange</code></a></li><li><a href="#round"><code>round</code></a></li><li><a href="#standardDeviation"><code>standardDeviation</code></a></li></ul><h3 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h3><ul><li><a href="#speechSynthesis"><code>speechSynthesis</code></a></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ul><li><a href="#JSONToFile"><code>JSONToFile</code></a></li><li><a href="#readFileLines"><code>readFileLines</code></a></li></ul><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul><li><a href="#cleanObj"><code>cleanObj</code></a></li><li><a href="#objectFromPairs"><code>objectFromPairs</code></a></li><li><a href="#objectToPairs"><code>objectToPairs</code></a></li><li><a href="#shallowClone"><code>shallowClone</code></a></li><li><a href="#truthCheckCollection"><code>truthCheckCollection</code></a></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><a href="#anagrams"><code>anagrams</code></a></li><li><a href="#capitalize"><code>capitalize</code></a></li><li><a href="#capitalizeEveryWord"><code>capitalizeEveryWord</code></a></li><li><a href="#escapeRegExp"><code>escapeRegExp</code></a></li><li><a href="#fromCamelCase"><code>fromCamelCase</code></a></li><li><a href="#reverseString"><code>reverseString</code></a></li><li><a href="#sortCharactersInString"><code>sortCharactersInString</code></a></li><li><a href="#toCamelCase"><code>toCamelCase</code></a></li><li><a href="#truncateString"><code>truncateString</code></a></li></ul><h3 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h3><ul><li><a href="#coalesce"><code>coalesce</code></a></li><li><a href="#coalesceFactory"><code>coalesceFactory</code></a></li><li><a href="#extendHex"><code>extendHex</code></a></li><li><a href="#getType"><code>getType</code></a></li><li><a href="#hexToRGB"><code>hexToRGB</code></a></li><li><a href="#isArray"><code>isArray</code></a></li><li><a href="#isBoolean"><code>isBoolean</code></a></li><li><a href="#isFunction"><code>isFunction</code></a></li><li><a href="#isNumber"><code>isNumber</code></a></li><li><a href="#isString"><code>isString</code></a></li><li><a href="#isSymbol"><code>isSymbol</code></a></li><li><a href="#RGBToHex"><code>RGBToHex</code></a></li><li><a href="#timeTaken"><code>timeTaken</code></a></li><li><a href="#toOrdinalSuffix"><code>toOrdinalSuffix</code></a></li><li><a href="#UUIDGenerator"><code>UUIDGenerator</code></a></li><li><a href="#validateEmail"><code>validateEmail</code></a></li><li><a href="#validateNumber"><code>validateNumber</code></a></li></ul><h2 id="Array-1"><a href="#Array-1" class="headerlink" title="Array"></a>Array</h2><h3 id="arrayMax"><a href="#arrayMax" class="headerlink" title="arrayMax"></a>arrayMax</h3><p>返回数组中的最大值.</p><p>使用 <code>Math.max()</code> 配合展开操作符 (<code>...</code>) 得到数组中的最大值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayMax = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line"><span class="comment">// arrayMax([10, 1, 5]) -&gt; 10</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="arrayMin"><a href="#arrayMin" class="headerlink" title="arrayMin"></a>arrayMin</h3><p>返回数组中的最小值.</p><p>使用 <code>Math.min()</code> 配合展开操作符 (<code>...</code>) 得到数组中的最小值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayMin = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">Math</span>.min(...arr);</span><br><span class="line"><span class="comment">// arrayMin([10, 1, 5]) -&gt; 1</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><p>将一个数组分割成几个数组段.</p><p>使用 <code>Array.from()</code> 创建一个适合它长度的新的数组<br>使用 <code>Array.slice()</code> 分割为指定 <code>size</code> 长度的数组段<br>如果指定的数组不能被平均分割，最后的块将包含剩余的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chunk = <span class="function">(<span class="params">arr, size</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="built_in">Math</span>.ceil(arr.length / size)&#125;, (v, i) =&gt; arr.slice(i * size, i * size + size));</span><br><span class="line"><span class="comment">// chunk([1,2,3,4,5], 2) -&gt; [[1,2],[3,4],[5]]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h3><p>移除数组中的非真值</p><p>使用 <code>Array.filter()</code> 过滤非真值 (<code>false</code>, <code>null</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>, 和 <code>NaN</code>).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compact = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.filter(<span class="built_in">Boolean</span>);</span><br><span class="line"><span class="comment">// compact([0, 1, false, 2, '', 3, 'a', 'e'*23, NaN, 's', 34]) -&gt; [ 1, 2, 3, 'a', 's', 34 ]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="countOccurrences"><a href="#countOccurrences" class="headerlink" title="countOccurrences"></a>countOccurrences</h3><p>计算元素出现的次数.</p><p>使用 <code>Array.reduce()</code> 计算指定元素在数组中出现的次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countOccurrences = <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> v === value ? a + <span class="number">1</span> : a + <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// countOccurrences([1,1,2,1,2,3], 1) -&gt; 3</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="deepFlatten"><a href="#deepFlatten" class="headerlink" title="deepFlatten"></a>deepFlatten</h3><p>深度降维</p><p>使用递归.<br>使用 <code>Array.concat()</code> 和一个空数组 (<code>[]</code>) 还有展开运算符 (<code>...</code>) 降维一个多维数组.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepFlatten = <span class="function"><span class="params">arr</span> =&gt;</span> [].concat(...arr.map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">Array</span>.isArray(v) ? deepFlatten(v) : v));</span><br><span class="line"><span class="comment">// deepFlatten([1,[2],[[3],4],5]) -&gt; [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h3><p>返回两个数组的差集</p><p>创建一个 <code>b</code> 的 <code>Set</code>, 然后使用 <code>Array.filter()</code> 查找 <code>a</code> 中不包含 <code>b</code>的元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> difference = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(b); <span class="keyword">return</span> a.filter(<span class="function"><span class="params">x</span> =&gt;</span> !s.has(x)); &#125;;</span><br><span class="line"><span class="comment">// difference([1,2,3], [1,2,4]) -&gt; [3]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="distinctValuesOfArray"><a href="#distinctValuesOfArray" class="headerlink" title="distinctValuesOfArray"></a>distinctValuesOfArray</h3><p>返回数组中不重复的元素</p><p>使用 ES6的 <code>Set</code> 和展开运算符 <code>...rest</code> 过滤重复的元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> distinctValuesOfArray = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="comment">// distinctValuesOfArray([1,2,2,3,4,4,5]) -&gt; [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="dropElements"><a href="#dropElements" class="headerlink" title="dropElements"></a>dropElements</h3><p>给函数传递一个表达式和数组，只保留表达式为true的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dropElements = <span class="function">(<span class="params">arr, func</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (arr.length &gt; <span class="number">0</span> &amp;&amp; !func(arr[<span class="number">0</span>])) arr.shift();</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// dropElements([1, 2, 3, 4], n =&gt; n &gt;= 3) -&gt; [3,4]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="everyNth"><a href="#everyNth" class="headerlink" title="everyNth"></a>everyNth</h3><p>返回数组中每一个第n的元素.</p><p>使用 <code>Array.filter()</code> 返回每一个第n的元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> everyNth = <span class="function">(<span class="params">arr, nth</span>) =&gt;</span> arr.filter(<span class="function">(<span class="params">e, i</span>) =&gt;</span> i % nth === <span class="number">0</span>);</span><br><span class="line"><span class="comment">// everyNth([1,2,3,4,5,6], 2) -&gt; [ 1, 3, 5 ]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="filterNonUnique"><a href="#filterNonUnique" class="headerlink" title="filterNonUnique"></a>filterNonUnique</h3><p>过滤不唯一的元素.</p><p>使用 <code>Array.filter()</code> 只保留唯一的元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filterNonUnique = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="function"><span class="params">i</span> =&gt;</span> arr.indexOf(i) === arr.lastIndexOf(i));</span><br><span class="line"><span class="comment">// filterNonUnique([1,2,2,3,4,4,5]) -&gt; [1,3,5]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h3><p>降维数组.</p><p>使用 <code>Array.reduce()</code> 获取到每一个元素然后使用 <code>concat()</code> 降维.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(v), []);</span><br><span class="line"><span class="comment">// flatten([1,[2],3,4]) -&gt; [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="flattenDepth"><a href="#flattenDepth" class="headerlink" title="flattenDepth"></a>flattenDepth</h3><p>根据指定的深度降维数组.</p><p>使用递归，为所有维度的数组降低一维.<br>使用 <code>Array.reduce()</code> 和 <code>Array.concat()</code> 合并降维后的数组或元素.<br>此时如果 <code>depth</code> 为 <code>1</code> 停止递归.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flattenDepth = <span class="function">(<span class="params">arr, depth = <span class="number">1</span></span>) =&gt;</span></span><br><span class="line">  depth != <span class="number">1</span> ? arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(<span class="built_in">Array</span>.isArray(v) ? flattenDepth(v, depth - <span class="number">1</span>) : v), [])</span><br><span class="line">  : arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(v), []);</span><br><span class="line"><span class="comment">// flattenDepth([1,[2],[[[3],4],5]], 2) -&gt; [1,2,[3],4,5]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><p>根据指定的表达式为数组分组</p><p>使用 <code>Array.map()</code> 映射为根据表达式或属性名值计算后的数组<br>使用 <code>Array.reduce()</code> 创建一个键值是上一步map出来的结果，值是相对应的数组的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> groupBy = <span class="function">(<span class="params">arr, func</span>) =&gt;</span></span><br><span class="line">  arr.map(<span class="keyword">typeof</span> func === <span class="string">'function'</span> ? func : <span class="function"><span class="params">val</span> =&gt;</span> val[func])</span><br><span class="line">    .reduce(<span class="function">(<span class="params">acc, val, i</span>) =&gt;</span> &#123; acc[val] = (acc[val] || []).concat(arr[i]); <span class="keyword">return</span> acc; &#125;, &#123;&#125;);</span><br><span class="line"><span class="comment">// groupBy([6.1, 4.2, 6.3], Math.floor) -&gt; &#123;4: [4.2], 6: [6.1, 6.3]&#125;</span></span><br><span class="line"><span class="comment">// groupBy(['one', 'two', 'three'], 'length') -&gt; &#123;3: ['one', 'two'], 5: ['three']&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>返回集合的第一个元素</p><p>使用 <code>arr[0]</code> 返回给定数组的第一个元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> head = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// head([1,2,3]) -&gt; 1</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h3><p>返回一个数组中除去最后一个元素的其他元素.</p><p>使用 <code>arr.slice(0,-1)</code> 返回除去最后一个元素的其他元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initial = <span class="function"><span class="params">arr</span> =&gt;</span> arr.slice(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// initial([1,2,3]) -&gt; [1,2]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="initializeArrayWithRange"><a href="#initializeArrayWithRange" class="headerlink" title="initializeArrayWithRange"></a>initializeArrayWithRange</h3><p>初始化一个指定范围的数组</p><p>使用 <code>Array(end-start)</code> 创建一个期望长度的数组, 根据给定的范围使用<code>Array.map()</code>填充数组.<br>参数<code>start</code> 默认值为 <code>0</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initializeArrayWithRange = <span class="function">(<span class="params">end, start = <span class="number">0</span></span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: end - start &#125;).map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> i + start);</span><br><span class="line"><span class="comment">// initializeArrayWithRange(5) -&gt; [0,1,2,3,4]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="initializeArrayWithValues"><a href="#initializeArrayWithValues" class="headerlink" title="initializeArrayWithValues"></a>initializeArrayWithValues</h3><p>初始化并且根据给定的值填充数组.</p><p>使用 <code>Array(n)</code> 创建一个期望长度的数组, 根据给定的值使用 <code>fill(v)</code> 填充数组.<br>参数 <code>value</code> 默认值为 <code>0</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initializeArrayWithValues = <span class="function">(<span class="params">n, value = <span class="number">0</span></span>) =&gt;</span> <span class="built_in">Array</span>(n).fill(value);</span><br><span class="line"><span class="comment">// initializeArrayWithValues(5, 2) -&gt; [2,2,2,2,2]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="intersection"><a href="#intersection" class="headerlink" title="intersection"></a>intersection</h3><p>返回两个数组的交集.</p><p>创建一个 <code>b</code> 的 <code>Set</code>, 然后使用 <code>a</code> 的 <code>Array.filter()</code> 查找含 <code>b</code> 元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intersection = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(b); <span class="keyword">return</span> a.filter(<span class="function"><span class="params">x</span> =&gt;</span> s.has(x)); &#125;;</span><br><span class="line"><span class="comment">// intersection([1,2,3], [4,3,2]) -&gt; [2,3]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>返回数组中的最后一个元素.</p><p>使用 <code>arr.length - 1</code> 计算出最后一个元素的索引，然后返回它的值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> last = <span class="function"><span class="params">arr</span> =&gt;</span> arr[arr.length - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// last([1,2,3]) -&gt; 3</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="mapObject"><a href="#mapObject" class="headerlink" title="mapObject"></a>mapObject</h3><p>映射一个数组，结果是键值为他的每一个元素的值，值为给定表达式结果的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapObject = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> </span><br><span class="line">  (<span class="function"><span class="params">a</span> =&gt;</span> <span class="function">(<span class="params">a = [arr, arr.map(fn</span>)], <span class="params">a</span>[0].<span class="params">reduce</span>(<span class="params"> (acc,val,ind</span>) =&gt;</span> (acc[val] = a[<span class="number">1</span>][ind], acc), &#123;&#125;) )) ( );</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const squareIt = arr =&gt; mapObject(arr, a =&gt; a*a)</span></span><br><span class="line"><span class="comment">squareIt([1,2,3]) // &#123; 1: 1, 2: 4, 3: 9 &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="nthElement"><a href="#nthElement" class="headerlink" title="nthElement"></a>nthElement</h3><p>返回数组的第n个对象.</p><p>使用 <code>Array.slice()</code> 获取满足给定条件的数组的第一个元素<br>如果给定的索引超出范围，返回 <code>[]</code>.<br>参数 <code>n</code> 默认为第一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nthElement = <span class="function">(<span class="params">arr, n=<span class="number">0</span></span>) =&gt;</span> (n&gt;<span class="number">0</span>? arr.slice(n,n+<span class="number">1</span>) : arr.slice(n))[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// nthElement(['a','b','c'],1) -&gt; 'b'</span></span><br><span class="line"><span class="comment">// nthElement(['a','b','b'],-3) -&gt; 'a'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="pick"><a href="#pick" class="headerlink" title="pick"></a>pick</h3><p>返回对象的一个拷贝，返回的对象只含有给定的键的键值对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pick = <span class="function">(<span class="params">obj, arr</span>) =&gt;</span></span><br><span class="line">  arr.reduce(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> (curr <span class="keyword">in</span> obj &amp;&amp; (acc[curr] = obj[curr]), acc), &#123;&#125;);</span><br><span class="line"><span class="comment">// pick(&#123; 'a': 1, 'b': '2', 'c': 3 &#125;, ['a', 'c']) -&gt; &#123; 'a': 1, 'c': 3 &#125;</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>抽取数组中指定的元素</p><p>使用 <code>Array.filter()</code> 和 <code>Array.includes()</code> 抽出不需要的元素.<br>使用 <code>Array.length = 0</code> 重置数组并且使用 <code>Array.push()</code> 重新填充抽取后的数组.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pull = <span class="function">(<span class="params">arr, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> pulled = arr.filter(<span class="function">(<span class="params">v, i</span>) =&gt;</span> !args.includes(v));</span><br><span class="line">  arr.length = <span class="number">0</span>; pulled.forEach(<span class="function"><span class="params">v</span> =&gt;</span> arr.push(v));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// let myArray = ['a', 'b', 'c', 'a', 'b', 'c'];</span></span><br><span class="line"><span class="comment">// pull(myArray, 'a', 'c');</span></span><br><span class="line"><span class="comment">// console.log(myArray) -&gt; [ 'b', 'b' ]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>移除数组中给定表达式为 <code>false</code>. 的值</p><p>使用 <code>Array.filter()</code> 找到表达式为 <code>true</code> 的值，然后通过 <code>Array.reduce()</code> 使用 <code>Array.splice()</code> 移除.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> remove = <span class="function">(<span class="params">arr, func</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.isArray(arr) ? arr.filter(func).reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.splice(arr.indexOf(val), <span class="number">1</span>); <span class="keyword">return</span> acc.concat(val);</span><br><span class="line">    &#125;, [])</span><br><span class="line">  : [];</span><br><span class="line"><span class="comment">// remove([1, 2, 3, 4], n =&gt; n % 2 == 0) -&gt; [2, 4]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h3><p>返回数组的一个随机元素</p><p>使用 <code>Math.random()</code> 创建一个随机数，然后和 <code>length</code> 相乘之后通过 <code>Math.floor()</code> 找到一个最接近的数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sample = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length)];</span><br><span class="line"><span class="comment">// sample([3, 7, 9, 11]) -&gt; 9</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h3><p>打乱数组中值的顺序</p><p>使用 <code>Array.sort()</code> 重新排序, 使用 <code>Math.random() - 0.5</code> 作为<code>compareFunction</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shuffle = <span class="function"><span class="params">arr</span> =&gt;</span> arr.sort(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>);</span><br><span class="line"><span class="comment">// shuffle([1,2,3]) -&gt; [2,3,1]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="similarity"><a href="#similarity" class="headerlink" title="similarity"></a>similarity</h3><p>返回一个数组，它的值两个数组里面都存在.</p><p>使用 <code>includes()</code> 找出<code>values</code>不含有的元素，使用<code>filter()</code>移除.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> similarity = <span class="function">(<span class="params">arr, values</span>) =&gt;</span> arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> values.includes(v));</span><br><span class="line"><span class="comment">// similarity([1,2,3], [1,2,4]) -&gt; [1,2]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="symmetricDifference"><a href="#symmetricDifference" class="headerlink" title="symmetricDifference"></a>symmetricDifference</h3><p>返回两个数组的对称差异.</p><p>通过两个数组分别创建 <code>Set</code>, 然后使用 <code>Array.filter()</code> 找出不在另外一个集合中的元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symmetricDifference = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sA = <span class="keyword">new</span> <span class="built_in">Set</span>(a), sB = <span class="keyword">new</span> <span class="built_in">Set</span>(b);</span><br><span class="line">  <span class="keyword">return</span> [...a.filter(<span class="function"><span class="params">x</span> =&gt;</span> !sB.has(x)), ...b.filter(<span class="function"><span class="params">x</span> =&gt;</span> !sA.has(x))];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// symmetricDifference([1,2,3], [1,2,4]) -&gt; [3,4]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>返回数组中除去第一个元素的集合</p><p>如果数组<code>length</code> 大于 <code>1</code>, 返回 <code>arr.slice(1)</code> 否则就返回整个数组.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tail = <span class="function"><span class="params">arr</span> =&gt;</span> arr.length &gt; <span class="number">1</span> ? arr.slice(<span class="number">1</span>) : arr;</span><br><span class="line"><span class="comment">// tail([1,2,3]) -&gt; [2,3]</span></span><br><span class="line"><span class="comment">// tail([1]) -&gt; [1]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><p>返回前n个元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> take = <span class="function">(<span class="params">arr, n = <span class="number">1</span></span>) =&gt;</span> arr.slice(<span class="number">0</span>, n);</span><br><span class="line"><span class="comment">// take([1, 2, 3], 5) -&gt; [1, 2, 3]</span></span><br><span class="line"><span class="comment">// take([1, 2, 3], 0) -&gt; []</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="takeRight"><a href="#takeRight" class="headerlink" title="takeRight"></a>takeRight</h3><p>返回后n个元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> takeRight = <span class="function">(<span class="params">arr, n = <span class="number">1</span></span>) =&gt;</span> arr.slice(arr.length - n, arr.length);</span><br><span class="line"><span class="comment">// takeRight([1, 2, 3], 2) -&gt; [ 2, 3 ]</span></span><br><span class="line"><span class="comment">// takeRight([1, 2, 3]) -&gt; [3]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>合并两个集合（结果不含重复元素）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> union = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]));</span><br><span class="line"><span class="comment">// union([1,2,3], [4,3,2]) -&gt; [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="without"><a href="#without" class="headerlink" title="without"></a>without</h3><p>根据指定的值过滤数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> without = <span class="function">(<span class="params">arr, ...args</span>) =&gt;</span> arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> !args.includes(v));</span><br><span class="line"><span class="comment">// without([2, 1, 2, 3], 1, 2) -&gt; [3]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>根据原始数组的位置把多个数组压缩</p><p>使用 <code>Math.max.apply()</code> 获取输入数组中最大的长度，根据这个长度使用<code>Array.from()</code>创建一个新的数组，之后把输入数组的映射压缩到里面，如果某个数组缺少元素使用<code>undefined</code>代替</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zip = <span class="function">(<span class="params">...arrays</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> maxLength = <span class="built_in">Math</span>.max(...arrays.map(<span class="function"><span class="params">x</span> =&gt;</span> x.length));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: maxLength&#125;).map(<span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: arrays.length&#125;, (_, k) =&gt; arrays[k][i]);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//zip(['a', 'b'], [1, 2], [true, false]); -&gt; [['a', 1, true], ['b', 2, false]]</span></span><br><span class="line"><span class="comment">//zip(['a'], [1, 2], [true, false]); -&gt; [['a', 1, true], [undefined, 2, false]]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="Browser-1"><a href="#Browser-1" class="headerlink" title="Browser"></a>Browser</h2><h3 id="bottomVisible"><a href="#bottomVisible" class="headerlink" title="bottomVisible"></a>bottomVisible</h3><p>如果到达页面底部，返回<code>true</code>否则返回<code>false</code></p><p>使用 <code>scrollY</code>, <code>scrollHeight</code> 和 <code>clientHeight</code> 判断是否到达页面底部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bottomVisible = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">document</span>.documentElement.clientHeight + <span class="built_in">window</span>.scrollY &gt;= <span class="built_in">document</span>.documentElement.scrollHeight || <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line"><span class="comment">// bottomVisible() -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="currentURL"><a href="#currentURL" class="headerlink" title="currentURL"></a>currentURL</h3><p>返回当前页面的URL.</p><p>使用 <code>window.location.href</code> 获取当前页面URL.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> currentURL = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">window</span>.location.href;</span><br><span class="line"><span class="comment">// currentUrl() -&gt; 'https://google.com'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="elementIsVisibleInViewport"><a href="#elementIsVisibleInViewport" class="headerlink" title="elementIsVisibleInViewport"></a>elementIsVisibleInViewport</h3><p>如果一个元素在视口可见，返回<code>true</code>否则返回<code>false</code></p><p>使用 <code>Element.getBoundingClientRect()</code> 和 <code>window.inner(Width|Height)</code> 判断元素是否在视口可见，第二个参数设置为<code>true</code>表示是否部分可见，默认值为<code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementIsVisibleInViewport = <span class="function">(<span class="params">el, partiallyVisible = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; top, left, bottom, right &#125; = el.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">return</span> partiallyVisible</span><br><span class="line">    ? ((top &gt; <span class="number">0</span> &amp;&amp; top &lt; innerHeight) || (bottom &gt; <span class="number">0</span> &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">      ((left &gt; <span class="number">0</span> &amp;&amp; left &lt; innerWidth) || (right &gt; <span class="number">0</span> &amp;&amp; right &lt; innerWidth))</span><br><span class="line">    : top &gt;= <span class="number">0</span> &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// e.g. 100x100 viewport and a 10x10px element at position &#123;top: -1, left: 0, bottom: 9, right: 10&#125;</span></span><br><span class="line"><span class="comment">// elementIsVisibleInViewport(el) -&gt; false (not fully visible)</span></span><br><span class="line"><span class="comment">// elementIsVisibleInViewport(el, true) -&gt; true (partially visible)</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="getScrollPosition"><a href="#getScrollPosition" class="headerlink" title="getScrollPosition"></a>getScrollPosition</h3><p>返回滚动条在当前页面的位置.</p><p>如果 <code>pageXOffset</code> 和 <code>pageYOffset</code> 未定义，使用 <code>scrollLeft</code> and <code>scrollTop</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getScrollPosition = <span class="function">(<span class="params">el = <span class="built_in">window</span></span>) =&gt;</span></span><br><span class="line">  (&#123;<span class="attr">x</span>: (el.pageXOffset !== <span class="literal">undefined</span>) ? el.pageXOffset : el.scrollLeft,</span><br><span class="line">    y: (el.pageYOffset !== <span class="literal">undefined</span>) ? el.pageYOffset : el.scrollTop&#125;);</span><br><span class="line"><span class="comment">// getScrollPosition() -&gt; &#123;x: 0, y: 200&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="getURLParameters"><a href="#getURLParameters" class="headerlink" title="getURLParameters"></a>getURLParameters</h3><p>返回URL查询字符串对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getURLParameters = <span class="function"><span class="params">url</span> =&gt;</span></span><br><span class="line">  url.match(<span class="regexp">/([^?=&amp;]+)(=([^&amp;]*))/g</span>).reduce(</span><br><span class="line">    (a, v) =&gt; (a[v.slice(<span class="number">0</span>, v.indexOf(<span class="string">'='</span>))] = v.slice(v.indexOf(<span class="string">'='</span>) + <span class="number">1</span>), a), &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// getURLParameters('http://url.com/page?name=Adam&amp;surname=Smith') -&gt; &#123;name: 'Adam', surname: 'Smith'&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h3><p>重定向到指定的URL.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> redirect = <span class="function">(<span class="params">url, asLink = <span class="literal">true</span></span>) =&gt;</span></span><br><span class="line">  asLink ? <span class="built_in">window</span>.location.href = url : <span class="built_in">window</span>.location.replace(url);</span><br><span class="line"><span class="comment">// redirect('https://google.com')</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="scrollToTop"><a href="#scrollToTop" class="headerlink" title="scrollToTop"></a>scrollToTop</h3><p>平滑滚动到页面顶部.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scrollToTop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">  <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(scrollToTop);</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, c - c / <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// scrollToTop()</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="Date-1"><a href="#Date-1" class="headerlink" title="Date"></a>Date</h2><h3 id="getDaysDiffBetweenDates"><a href="#getDaysDiffBetweenDates" class="headerlink" title="getDaysDiffBetweenDates"></a>getDaysDiffBetweenDates</h3><p>返回两个Date对象的天数差</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDaysDiffBetweenDates = <span class="function">(<span class="params">dateInitial, dateFinal</span>) =&gt;</span> (dateFinal - dateInitial) / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line"><span class="comment">// getDaysDiffBetweenDates(new Date("2017-12-13"), new Date("2017-12-22")) -&gt; 9</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="JSONToDate"><a href="#JSONToDate" class="headerlink" title="JSONToDate"></a>JSONToDate</h3><p>转换一个JSON对象为时间.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JSONToDate = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(arr.toString().substr(<span class="number">6</span>)));</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123; dt.getDate() &#125;</span>/<span class="subst">$&#123; dt.getMonth() + <span class="number">1</span> &#125;</span>/<span class="subst">$&#123; dt.getFullYear() &#125;</span>`</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// JSONToDate(/Date(1489525200000)/) -&gt; "14/3/2017"</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="toEnglishDate"><a href="#toEnglishDate" class="headerlink" title="toEnglishDate"></a>toEnglishDate</h3><p>把美国时间转换为英国时间.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toEnglishDate  = <span class="function">(<span class="params">time</span>) =&gt;</span></span><br><span class="line">  &#123;<span class="keyword">try</span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(time).toISOString().split(<span class="string">'T'</span>)[<span class="number">0</span>].replace(<span class="regexp">/-/g</span>, <span class="string">'/'</span>)&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// toEnglishDate('09/21/2010') -&gt; '21/09/2010'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="Function-1"><a href="#Function-1" class="headerlink" title="Function"></a>Function</h2><h3 id="chainAsync"><a href="#chainAsync" class="headerlink" title="chainAsync"></a>chainAsync</h3><p>串联异步方法.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chainAsync = <span class="function"><span class="params">fns</span> =&gt;</span> &#123; <span class="keyword">let</span> curr = <span class="number">0</span>; <span class="keyword">const</span> next = <span class="function"><span class="params">()</span> =&gt;</span> fns[curr++](next); next(); &#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">chainAsync([</span></span><br><span class="line"><span class="comment">  next =&gt; &#123; console.log('0 seconds'); setTimeout(next, 1000); &#125;,</span></span><br><span class="line"><span class="comment">  next =&gt; &#123; console.log('1 second');  setTimeout(next, 1000); &#125;,</span></span><br><span class="line"><span class="comment">  next =&gt; &#123; console.log('2 seconds'); &#125;</span></span><br><span class="line"><span class="comment">])</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>从右往左执行函数组合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...fns</span>) =&gt;</span> fns.reduce(<span class="function">(<span class="params">f, g</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> f(g(...args)));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const add5 = x =&gt; x + 5</span></span><br><span class="line"><span class="comment">const multiply = (x, y) =&gt; x * y</span></span><br><span class="line"><span class="comment">const multiplyAndAdd5 = compose(add5, multiply)</span></span><br><span class="line"><span class="comment">multiplyAndAdd5(5, 2) -&gt; 15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="curry"><a href="#curry" class="headerlink" title="curry"></a>curry</h3><p>对函数进行柯里化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function">(<span class="params">fn, arity = fn.length, ...args</span>) =&gt;</span></span><br><span class="line">  arity &lt;= args.length</span><br><span class="line">    ? fn(...args)</span><br><span class="line">    : curry.bind(<span class="literal">null</span>, fn, arity, ...args);</span><br><span class="line"><span class="comment">// curry(Math.pow)(2)(10) -&gt; 1024</span></span><br><span class="line"><span class="comment">// curry(Math.min, 3)(10)(50)(2) -&gt; 2</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="functionName"><a href="#functionName" class="headerlink" title="functionName"></a>functionName</h3><p>打印函数名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> functionName = <span class="function"><span class="params">fn</span> =&gt;</span> (<span class="built_in">console</span>.debug(fn.name), fn);</span><br><span class="line"><span class="comment">// functionName(Math.max) -&gt; max (logged in debug channel of console)</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><p>从左往右执行函数组合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipeFunctions = <span class="function">(<span class="params">...fns</span>) =&gt;</span> fns.reduce(<span class="function">(<span class="params">f, g</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> g(f(...args)));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const add5 = x =&gt; x + 5</span></span><br><span class="line"><span class="comment">const multiply = (x, y) =&gt; x * y</span></span><br><span class="line"><span class="comment">const multiplyAndAdd5 = pipeFunctions(multiply, add5)</span></span><br><span class="line"><span class="comment">multiplyAndAdd5(5, 2) -&gt; 15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h3><p>把异步函数转化为promise</p><p><em>In Node 8+, you can use <a href="https://nodejs.org/api/util.html#util_util_promisify_original" target="_blank" rel="noopener"><code>util.promisify</code></a></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promisify = <span class="function"><span class="params">func</span> =&gt;</span></span><br><span class="line">  (...args) =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line">      func(...args, (err, result) =&gt;</span><br><span class="line">        err ? reject(err) : resolve(result))</span><br><span class="line">    );</span><br><span class="line"><span class="comment">// const delay = promisify((d, cb) =&gt; setTimeout(cb, d))</span></span><br><span class="line"><span class="comment">// delay(2000).then(() =&gt; console.log('Hi!')) -&gt; Promise resolves after 2s</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="runPromisesInSeries"><a href="#runPromisesInSeries" class="headerlink" title="runPromisesInSeries"></a>runPromisesInSeries</h3><p>执行一系列promise函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runPromisesInSeries = <span class="function"><span class="params">ps</span> =&gt;</span> ps.reduce(<span class="function">(<span class="params">p, next</span>) =&gt;</span> p.then(next), <span class="built_in">Promise</span>.resolve());</span><br><span class="line"><span class="comment">// const delay = (d) =&gt; new Promise(r =&gt; setTimeout(r, d))</span></span><br><span class="line"><span class="comment">// runPromisesInSeries([() =&gt; delay(1000), () =&gt; delay(2000)]) -&gt; executes each promise sequentially, taking a total of 3 seconds to complete</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><p>延迟执行异步函数</p><p>Delay executing part of an <code>async</code> function, by putting it to sleep, returning a <code>Promise</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">ms</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">async function sleepyWork() &#123;</span></span><br><span class="line"><span class="comment">  console.log('I\'m going to sleep for 1 second.');</span></span><br><span class="line"><span class="comment">  await sleep(1000);</span></span><br><span class="line"><span class="comment">  console.log('I woke up after 1 second.');</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="Math-1"><a href="#Math-1" class="headerlink" title="Math"></a>Math</h2><h3 id="arrayAverage"><a href="#arrayAverage" class="headerlink" title="arrayAverage"></a>arrayAverage</h3><p>返回数组的平均值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayAverage = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>) / arr.length;</span><br><span class="line"><span class="comment">// arrayAverage([1,2,3]) -&gt; 2</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="arraySum"><a href="#arraySum" class="headerlink" title="arraySum"></a>arraySum</h3><p>返回数组的和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arraySum = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// arraySum([1,2,3,4]) -&gt; 10</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="collatz"><a href="#collatz" class="headerlink" title="collatz"></a>collatz</h3><p>实现Collatz算法.</p><p>如果 <code>n</code> 是偶数, 返回 <code>n/2</code>. 否则返回 <code>3n+1</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> collatz = <span class="function"><span class="params">n</span> =&gt;</span> (n % <span class="number">2</span> == <span class="number">0</span>) ? (n / <span class="number">2</span>) : (<span class="number">3</span> * n + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// collatz(8) --&gt; 4</span></span><br><span class="line"><span class="comment">// collatz(5) --&gt; 16</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="digitize"><a href="#digitize" class="headerlink" title="digitize"></a>digitize</h3><p>把数字转为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> digitize = <span class="function"><span class="params">n</span> =&gt;</span> [...<span class="string">''</span>+n].map(<span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">parseInt</span>(i));</span><br><span class="line"><span class="comment">// digitize(2334) -&gt; [2, 3, 3, 4]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="distance"><a href="#distance" class="headerlink" title="distance"></a>distance</h3><p>返回两点距离.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> distance = <span class="function">(<span class="params">x0, y0, x1, y1</span>) =&gt;</span> <span class="built_in">Math</span>.hypot(x1 - x0, y1 - y0);</span><br><span class="line"><span class="comment">// distance(1,1, 2,3) -&gt; 2.23606797749979</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="factorial"><a href="#factorial" class="headerlink" title="factorial"></a>factorial</h3><p>计算一个数字的阶乘.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> factorial = <span class="function"><span class="params">n</span> =&gt;</span></span><br><span class="line">  n &lt; <span class="number">0</span> ? <span class="function">(<span class="params">(</span>) =&gt;</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Negative numbers are not allowed!'</span>) &#125;)()</span><br><span class="line">  : n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * factorial(n - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// factorial(6) -&gt; 720</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="fibonacci"><a href="#fibonacci" class="headerlink" title="fibonacci"></a>fibonacci</h3><p>指定一个长度，输出斐波那契数列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacci = <span class="function"><span class="params">n</span> =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>(n).fill(<span class="number">0</span>).reduce(<span class="function">(<span class="params">acc, val, i</span>) =&gt;</span> acc.concat(i &gt; <span class="number">1</span> ? acc[i - <span class="number">1</span>] + acc[i - <span class="number">2</span>] : i), []);</span><br><span class="line"><span class="comment">// fibonacci(5) -&gt; [0,1,1,2,3]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h3><p>计算两个数字之间的最大公约数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line"><span class="comment">// gcd (8, 36) -&gt; 4</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="hammingDistance"><a href="#hammingDistance" class="headerlink" title="hammingDistance"></a>hammingDistance</h3><p>计算两个值的Hamming距离.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hammingDistance = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span></span><br><span class="line">  ((num1 ^ num2).toString(<span class="number">2</span>).match(<span class="regexp">/1/g</span>) || <span class="string">''</span>).length;</span><br><span class="line"><span class="comment">// hammingDistance(2,3) -&gt; 1</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="isDivisible"><a href="#isDivisible" class="headerlink" title="isDivisible"></a>isDivisible</h3><p>检查第一个数字是否可被第二个数字整除.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDivisible = <span class="function">(<span class="params">dividend, divisor</span>) =&gt;</span> dividend % divisor === <span class="number">0</span>;</span><br><span class="line"><span class="comment">// isDivisible(6,3) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="isEven"><a href="#isEven" class="headerlink" title="isEven"></a>isEven</h3><p>检查数字是否为偶数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEven = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"><span class="comment">// isEven(3) -&gt; false</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="lcm"><a href="#lcm" class="headerlink" title="lcm"></a>lcm</h3><p>计算两个数字的最小公倍数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lcm = <span class="function">(<span class="params">x,y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(x*y)/(gcd(x,y));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// lcm(12,7) -&gt; 84</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="median"><a href="#median" class="headerlink" title="median"></a>median</h3><p>返回数组的中位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> median = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>), nums = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  <span class="keyword">return</span> arr.length % <span class="number">2</span> !== <span class="number">0</span> ? nums[mid] : (nums[mid - <span class="number">1</span>] + nums[mid]) / <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// median([5,6,50,1,-5]) -&gt; 5</span></span><br><span class="line"><span class="comment">// median([0,10,-2,7]) -&gt; 3.5</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="palindrome"><a href="#palindrome" class="headerlink" title="palindrome"></a>palindrome</h3><p>判断给定字符串是否是回文字符串（回文字符串是正读和反读都一样的字符串，比如“level”或者“noon”）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> palindrome = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> s = str.toLowerCase().replace(<span class="regexp">/[\W_]/g</span>,<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> s === s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// palindrome('taco cat') -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="percentile"><a href="#percentile" class="headerlink" title="percentile"></a>percentile</h3><p>使用百分位数公式来计算给定数组中有多少数字小于或等于给定值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> percentile = <span class="function">(<span class="params">arr, val</span>) =&gt;</span></span><br><span class="line">  <span class="number">100</span> * arr.reduce(<span class="function">(<span class="params">acc,v</span>) =&gt;</span> acc + (v &lt; val ? <span class="number">1</span> : <span class="number">0</span>) + (v === val ? <span class="number">0.5</span> : <span class="number">0</span>), <span class="number">0</span>) / arr.length;</span><br><span class="line"><span class="comment">// percentile([1,2,3,4,5,6,7,8,9,10], 6) -&gt; 55</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="powerset"><a href="#powerset" class="headerlink" title="powerset"></a>powerset</h3><p>输出给定数组的所有子集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> powerset = <span class="function"><span class="params">arr</span> =&gt;</span></span><br><span class="line">  arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(a.map(<span class="function"><span class="params">r</span> =&gt;</span> [v].concat(r))), [[]]);</span><br><span class="line"><span class="comment">// powerset([1,2]) -&gt; [[], [1], [2], [2,1]]</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="randomIntegerInRange"><a href="#randomIntegerInRange" class="headerlink" title="randomIntegerInRange"></a>randomIntegerInRange</h3><p>返回指定范围内的随机整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomIntegerInRange = <span class="function">(<span class="params">min, max</span>) =&gt;</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line"><span class="comment">// randomIntegerInRange(0, 5) -&gt; 2</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="randomNumberInRange"><a href="#randomNumberInRange" class="headerlink" title="randomNumberInRange"></a>randomNumberInRange</h3><p>返回指定范围内的随机数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNumberInRange = <span class="function">(<span class="params">min, max</span>) =&gt;</span> <span class="built_in">Math</span>.random() * (max - min) + min;</span><br><span class="line"><span class="comment">// randomNumberInRange(2,10) -&gt; 6.0211363285087005</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><p>将数字四舍五入到指定的数字位数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> round = <span class="function">(<span class="params">n, decimals=<span class="number">0</span></span>) =&gt;</span> <span class="built_in">Number</span>(<span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.round(<span class="string">`<span class="subst">$&#123;n&#125;</span>e<span class="subst">$&#123;decimals&#125;</span>`</span>)&#125;</span>e-<span class="subst">$&#123;decimals&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// round(1.005, 2) -&gt; 1.01</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="standardDeviation"><a href="#standardDeviation" class="headerlink" title="standardDeviation"></a>standardDeviation</h3><p>返回数组的标准差</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> standardDeviation = <span class="function">(<span class="params">arr, usePopulation = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mean = arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>) / arr.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(</span><br><span class="line">    arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc.concat(<span class="built_in">Math</span>.pow(val - mean, <span class="number">2</span>)), [])</span><br><span class="line">       .reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>) / (arr.length - (usePopulation ? <span class="number">0</span> : <span class="number">1</span>))</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// standardDeviation([10,2,38,23,38,23,21]) -&gt; 13.284434142114991 (sample)</span></span><br><span class="line"><span class="comment">// standardDeviation([10,2,38,23,38,23,21], true) -&gt; 12.29899614287479 (population)</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="Media-1"><a href="#Media-1" class="headerlink" title="Media"></a>Media</h2><h3 id="speechSynthesis"><a href="#speechSynthesis" class="headerlink" title="speechSynthesis"></a>speechSynthesis</h3><p>语音合成 (实验特性).</p><p>详情查看 <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance" target="_blank" rel="noopener">SpeechSynthesisUtterance interface of the Web Speech API</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> speechSynthesis = <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="keyword">new</span> SpeechSynthesisUtterance(message);</span><br><span class="line">  msg.voice = <span class="built_in">window</span>.speechSynthesis.getVoices()[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">window</span>.speechSynthesis.speak(msg);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// speechSynthesis('Hello, World') -&gt; plays the message</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="Node-1"><a href="#Node-1" class="headerlink" title="Node"></a>Node</h2><h3 id="JSONToFile"><a href="#JSONToFile" class="headerlink" title="JSONToFile"></a>JSONToFile</h3><p>将一个JSON对象转换为文件.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> JSONToFile = <span class="function">(<span class="params">obj, filename</span>) =&gt;</span> fs.writeFile(<span class="string">`<span class="subst">$&#123;filename&#125;</span>.json`</span>, <span class="built_in">JSON</span>.stringify(obj, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">// JSONToFile(&#123;test: "is passed"&#125;, 'testJsonFile') -&gt; writes the object to 'testJsonFile.json'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="readFileLines"><a href="#readFileLines" class="headerlink" title="readFileLines"></a>readFileLines</h3><p>读取指定的文件并且根据行生成数组</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> readFileLines = <span class="function"><span class="params">filename</span> =&gt;</span> fs.readFileSync(filename).toString(<span class="string">'UTF8'</span>).split(<span class="string">'\n'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  contents of test.txt :</span></span><br><span class="line"><span class="comment">    line1</span></span><br><span class="line"><span class="comment">    line2</span></span><br><span class="line"><span class="comment">    line3</span></span><br><span class="line"><span class="comment">    ___________________________</span></span><br><span class="line"><span class="comment">  let arr = readFileLines('test.txt')</span></span><br><span class="line"><span class="comment">  console.log(arr) // -&gt; ['line1', 'line2', 'line3']</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="Object-1"><a href="#Object-1" class="headerlink" title="Object"></a>Object</h2><h3 id="cleanObj"><a href="#cleanObj" class="headerlink" title="cleanObj"></a>cleanObj</h3><p>移除对象中除去给定的属性名之外的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cleanObj = <span class="function">(<span class="params">obj, keysToKeep = [], childIndicator</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === childIndicator) &#123;</span><br><span class="line">      cleanObj(obj[key], keysToKeep, childIndicator);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!keysToKeep.includes(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  const testObj = &#123;a: 1, b: 2, children: &#123;a: 1, b: 2&#125;&#125;</span></span><br><span class="line"><span class="comment">  cleanObj(testObj, ["a"],"children")</span></span><br><span class="line"><span class="comment">  console.log(testObj)// &#123; a: 1, children : &#123; a: 1&#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="objectFromPairs"><a href="#objectFromPairs" class="headerlink" title="objectFromPairs"></a>objectFromPairs</h3><p>根据给定的键值对生成对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectFromPairs = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> (a[v[<span class="number">0</span>]] = v[<span class="number">1</span>], a), &#123;&#125;);</span><br><span class="line"><span class="comment">// objectFromPairs([['a',1],['b',2]]) -&gt; &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="objectToPairs"><a href="#objectToPairs" class="headerlink" title="objectToPairs"></a>objectToPairs</h3><p>转换一个对象为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToPairs = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.keys(obj).map(<span class="function"><span class="params">k</span> =&gt;</span> [k, obj[k]]);</span><br><span class="line"><span class="comment">// objectToPairs(&#123;a: 1, b: 2&#125;) -&gt; [['a',1],['b',2]])</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="shallowClone"><a href="#shallowClone" class="headerlink" title="shallowClone"></a>shallowClone</h3><p>创建一个对象的浅拷贝.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const a = &#123; x: true, y: 1 &#125;;</span></span><br><span class="line"><span class="comment">const b = shallowClone(a);</span></span><br><span class="line"><span class="comment">a === b -&gt; false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="truthCheckCollection"><a href="#truthCheckCollection" class="headerlink" title="truthCheckCollection"></a>truthCheckCollection</h3><p>检查某个属性名是否在一个数组中都存在</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">truthCheckCollection = <span class="function">(<span class="params">collection, pre</span>) =&gt;</span> (collection.every(<span class="function"><span class="params">obj</span> =&gt;</span> obj[pre]));</span><br><span class="line"><span class="comment">// truthCheckCollection([&#123;"user": "Tinky-Winky", "sex": "male"&#125;, &#123;"user": "Dipsy", "sex": "male"&#125;], "sex") -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><h3 id="anagrams"><a href="#anagrams" class="headerlink" title="anagrams"></a>anagrams</h3><p>生成一个字符串的所有字符排列组合（包含重复）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anagrams = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (str.length &lt;= <span class="number">2</span>) <span class="keyword">return</span> str.length === <span class="number">2</span> ? [str, str[<span class="number">1</span>] + str[<span class="number">0</span>]] : [str];</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">acc, letter, i</span>) =&gt;</span></span><br><span class="line">    acc.concat(anagrams(str.slice(<span class="number">0</span>, i) + str.slice(i + <span class="number">1</span>)).map(<span class="function"><span class="params">val</span> =&gt;</span> letter + val)), []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// anagrams('abc') -&gt; ['abc','acb','bac','bca','cab','cba']</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="Capitalize"><a href="#Capitalize" class="headerlink" title="Capitalize"></a>Capitalize</h3><p>将给定字符串首字母大写.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalize = <span class="function">(<span class="params">[first,...rest], lowerRest = <span class="literal">false</span></span>) =&gt;</span></span><br><span class="line">  first.toUpperCase() + (lowerRest ? rest.join(<span class="string">''</span>).toLowerCase() : rest.join(<span class="string">''</span>));</span><br><span class="line"><span class="comment">// capitalize('myName') -&gt; 'MyName'</span></span><br><span class="line"><span class="comment">// capitalize('myName', true) -&gt; 'Myname'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="capitalizeEveryWord"><a href="#capitalizeEveryWord" class="headerlink" title="capitalizeEveryWord"></a>capitalizeEveryWord</h3><p>将给定字符串的每个单词首字母大写.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalizeEveryWord = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/\b[a-z]/g</span>, char =&gt; char.toUpperCase());</span><br><span class="line"><span class="comment">// capitalizeEveryWord('hello world!') -&gt; 'Hello World!'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="escapeRegExp"><a href="#escapeRegExp" class="headerlink" title="escapeRegExp"></a>escapeRegExp</h3><p>转义字符串以便在正则表达式中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> escapeRegExp = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/[.*+?^$&#123;&#125;()|[\]\\]/g</span>, <span class="string">'\\$&amp;'</span>);</span><br><span class="line"><span class="comment">// escapeRegExp('(test)') -&gt; \\(test\\)</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="fromCamelCase"><a href="#fromCamelCase" class="headerlink" title="fromCamelCase"></a>fromCamelCase</h3><p>把camelcase字符串转换成其他格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fromCamelCase = <span class="function">(<span class="params">str, separator = <span class="string">'_'</span></span>) =&gt;</span></span><br><span class="line">  str.replace(<span class="regexp">/([a-z\d])([A-Z])/g</span>, <span class="string">'$1'</span> + separator + <span class="string">'$2'</span>)</span><br><span class="line">    .replace(<span class="regexp">/([A-Z]+)([A-Z][a-z\d]+)/g</span>, <span class="string">'$1'</span> + separator + <span class="string">'$2'</span>).toLowerCase();</span><br><span class="line"><span class="comment">// fromCamelCase('someDatabaseFieldName', ' ') -&gt; 'some database field name'</span></span><br><span class="line"><span class="comment">// fromCamelCase('someLabelThatNeedsToBeCamelized', '-') -&gt; 'some-label-that-needs-to-be-camelized'</span></span><br><span class="line"><span class="comment">// fromCamelCase('someJavascriptProperty', '_') -&gt; 'some_javascript_property'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="reverseString"><a href="#reverseString" class="headerlink" title="reverseString"></a>reverseString</h3><p>反转字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverseString = <span class="function"><span class="params">str</span> =&gt;</span> [...str].reverse().join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">// reverseString('foobar') -&gt; 'raboof'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="sortCharactersInString"><a href="#sortCharactersInString" class="headerlink" title="sortCharactersInString"></a>sortCharactersInString</h3><p>按照字母顺序重新排列字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortCharactersInString = <span class="function"><span class="params">str</span> =&gt;</span></span><br><span class="line">  str.split(<span class="string">''</span>).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b)).join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">// sortCharactersInString('cabbage') -&gt; 'aabbceg'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="toCamelCase"><a href="#toCamelCase" class="headerlink" title="toCamelCase"></a>toCamelCase</h3><p>把一个字符串转换为camelcase.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toCamelCase = <span class="function"><span class="params">str</span> =&gt;</span></span><br><span class="line">  str.replace(<span class="regexp">/^([A-Z])|[\s-_]+(\w)/g</span>, (match, p1, p2, offset) =&gt;  p2 ? p2.toUpperCase() : p1.toLowerCase());</span><br><span class="line"><span class="comment">// toCamelCase("some_database_field_name") -&gt; 'someDatabaseFieldName'</span></span><br><span class="line"><span class="comment">// toCamelCase("Some label that needs to be camelized") -&gt; 'someLabelThatNeedsToBeCamelized'</span></span><br><span class="line"><span class="comment">// toCamelCase("some-javascript-property") -&gt; 'someJavascriptProperty'</span></span><br><span class="line"><span class="comment">// toCamelCase("some-mixed_string with spaces_underscores-and-hyphens") -&gt; 'someMixedStringWithSpacesUnderscoresAndHyphens'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="truncateString"><a href="#truncateString" class="headerlink" title="truncateString"></a>truncateString</h3><p>根据指定长度截取字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> truncateString = <span class="function">(<span class="params">str, num</span>) =&gt;</span></span><br><span class="line">  str.length &gt; num ? str.slice(<span class="number">0</span>, num &gt; <span class="number">3</span> ? num - <span class="number">3</span> : num) + <span class="string">'...'</span> : str;</span><br><span class="line"><span class="comment">// truncateString('boomerang', 7) -&gt; 'boom...'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="Utility-1"><a href="#Utility-1" class="headerlink" title="Utility"></a>Utility</h2><h3 id="coalesce"><a href="#coalesce" class="headerlink" title="coalesce"></a>coalesce</h3><p>返回第一个不为null/undefined的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> coalesce = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.find(<span class="function"><span class="params">_</span> =&gt;</span> ![<span class="literal">undefined</span>, <span class="literal">null</span>].includes(_))</span><br><span class="line"><span class="comment">// coalesce(null,undefined,"",NaN, "Waldo") -&gt; ""</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="coalesceFactory"><a href="#coalesceFactory" class="headerlink" title="coalesceFactory"></a>coalesceFactory</h3><p>实现自定义coalesce函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> coalesceFactory = <span class="function"><span class="params">valid</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> args.find(valid);</span><br><span class="line"><span class="comment">// const customCoalesce = coalesceFactory(_ =&gt; ![null, undefined, "", NaN].includes(_))</span></span><br><span class="line"><span class="comment">// customCoalesce(undefined, null, NaN, "", "Waldo") //-&gt; "Waldo"</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="extendHex"><a href="#extendHex" class="headerlink" title="extendHex"></a>extendHex</h3><p>将3位数的颜色代码扩展为6位数的颜色代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> extendHex = <span class="function"><span class="params">shortHex</span> =&gt;</span></span><br><span class="line">  <span class="string">'#'</span> + shortHex.slice(shortHex.startsWith(<span class="string">'#'</span>) ? <span class="number">1</span> : <span class="number">0</span>).split(<span class="string">''</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x+x).join(<span class="string">''</span>)</span><br><span class="line"><span class="comment">// extendHex('#03f') -&gt; '#0033ff'</span></span><br><span class="line"><span class="comment">// extendHex('05a') -&gt; '#0055aa'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="getType"><a href="#getType" class="headerlink" title="getType"></a>getType</h3><p>获取一个值的原生类型.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="params">v</span> =&gt;</span></span><br><span class="line">  v === <span class="literal">undefined</span> ? <span class="string">'undefined'</span> : v === <span class="literal">null</span> ? <span class="string">'null'</span> : v.constructor.name.toLowerCase();</span><br><span class="line"><span class="comment">// getType(new Set([1,2,3])) -&gt; "set"</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="hexToRGB"><a href="#hexToRGB" class="headerlink" title="hexToRGB"></a>hexToRGB</h3><p>将hex色值转换为RGB</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hexToRgb = <span class="function"><span class="params">hex</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> extendHex = <span class="function"><span class="params">shortHex</span> =&gt;</span></span><br><span class="line">    <span class="string">'#'</span> + shortHex.slice(shortHex.startsWith(<span class="string">'#'</span>) ? <span class="number">1</span> : <span class="number">0</span>).split(<span class="string">''</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x+x).join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">const</span> extendedHex = hex.slice(hex.startsWith(<span class="string">'#'</span>) ? <span class="number">1</span> : <span class="number">0</span>).length === <span class="number">3</span> ? extendHex(hex) : hex;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;<span class="built_in">parseInt</span>(extendedHex.slice(<span class="number">1</span>), <span class="number">16</span>) &gt;&gt; <span class="number">16</span>&#125;</span>, <span class="subst">$&#123;(<span class="built_in">parseInt</span>(extendedHex.slice(<span class="number">1</span>), <span class="number">16</span>) &amp; <span class="number">0x00ff00</span>) &gt;&gt; <span class="number">8</span>&#125;</span>, <span class="subst">$&#123;<span class="built_in">parseInt</span>(extendedHex.slice(<span class="number">1</span>), <span class="number">16</span>) &amp; <span class="number">0x0000ff</span>&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hexToRgb('#27ae60') -&gt; 'rgb(39, 174, 96)'</span></span><br><span class="line"><span class="comment">// hexToRgb('#acd') -&gt; 'rgb(170, 204, 221)'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h3><p>检查给定对象是否是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isArray = <span class="function"><span class="params">val</span> =&gt;</span> !!val &amp;&amp; <span class="built_in">Array</span>.isArray(val);</span><br><span class="line"><span class="comment">// isArray(null) -&gt; false</span></span><br><span class="line"><span class="comment">// isArray([1]) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="isBoolean"><a href="#isBoolean" class="headerlink" title="isBoolean"></a>isBoolean</h3><p>检查给定对象是否是布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isBoolean = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'boolean'</span>;</span><br><span class="line"><span class="comment">// isBoolean(null) -&gt; false</span></span><br><span class="line"><span class="comment">// isBoolean(false) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="isFunction"><a href="#isFunction" class="headerlink" title="isFunction"></a>isFunction</h3><p>检查给定对象是否是方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isFunction = <span class="function"><span class="params">val</span> =&gt;</span> val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'function'</span>;</span><br><span class="line"><span class="comment">// isFunction('x') -&gt; false</span></span><br><span class="line"><span class="comment">// isFunction(x =&gt; x) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="isNumber"><a href="#isNumber" class="headerlink" title="isNumber"></a>isNumber</h3><p>检查给定对象是否是数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isNumber = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span>;</span><br><span class="line"><span class="comment">// isNumber('1') -&gt; false</span></span><br><span class="line"><span class="comment">// isNumber(1) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="isString"><a href="#isString" class="headerlink" title="isString"></a>isString</h3><p>检查给定对象是否是字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isString = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'string'</span>;</span><br><span class="line"><span class="comment">// isString(10) -&gt; false</span></span><br><span class="line"><span class="comment">// isString('10') -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="isSymbol"><a href="#isSymbol" class="headerlink" title="isSymbol"></a>isSymbol</h3><p>检查给定对象是否是symbol.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isSymbol = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'symbol'</span>;</span><br><span class="line"><span class="comment">// isSymbol('x') -&gt; false</span></span><br><span class="line"><span class="comment">// isSymbol(Symbol('x')) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="RGBToHex"><a href="#RGBToHex" class="headerlink" title="RGBToHex"></a>RGBToHex</h3><p>将RGB色值转换为Hex</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RGBToHex = <span class="function">(<span class="params">r, g, b</span>) =&gt;</span> ((r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).toString(<span class="number">16</span>).padStart(<span class="number">6</span>, <span class="string">'0'</span>);</span><br><span class="line"><span class="comment">// RGBToHex(255, 165, 1) -&gt; 'ffa501'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="timeTaken"><a href="#timeTaken" class="headerlink" title="timeTaken"></a>timeTaken</h3><p>计算函数执行时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeTaken = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'timeTaken'</span>);  <span class="keyword">const</span> r = callback();</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'timeTaken'</span>);  <span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// timeTaken(() =&gt; Math.pow(2, 10)) -&gt; 1024</span></span><br><span class="line"><span class="comment">// (logged): timeTaken: 0.02099609375ms</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="toOrdinalSuffix"><a href="#toOrdinalSuffix" class="headerlink" title="toOrdinalSuffix"></a>toOrdinalSuffix</h3><p>Adds an ordinal suffix to a number.</p><p>Use the modulo operator (<code>%</code>) to find values of single and tens digits.<br>Find which ordinal pattern digits match.<br>If digit is found in teens pattern, use teens ordinal.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toOrdinalSuffix = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> int = <span class="built_in">parseInt</span>(num), digits = [(int % <span class="number">10</span>), (int % <span class="number">100</span>)],</span><br><span class="line">    ordinals = [<span class="string">'st'</span>, <span class="string">'nd'</span>, <span class="string">'rd'</span>, <span class="string">'th'</span>], oPattern = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    tPattern = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>];</span><br><span class="line">  <span class="keyword">return</span> oPattern.includes(digits[<span class="number">0</span>]) &amp;&amp; !tPattern.includes(digits[<span class="number">1</span>]) ? int + ordinals[digits[<span class="number">0</span>] - <span class="number">1</span>] : int + ordinals[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// toOrdinalSuffix("123") -&gt; "123rd"</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="UUIDGenerator"><a href="#UUIDGenerator" class="headerlink" title="UUIDGenerator"></a>UUIDGenerator</h3><p>生成UUID.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UUIDGenerator = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  ([<span class="number">1e7</span>] + <span class="number">-1e3</span> + <span class="number">-4e3</span> + <span class="number">-8e3</span> + <span class="number">-1e11</span>).replace(<span class="regexp">/[018]/g</span>, c =&gt;</span><br><span class="line">    (c ^ crypto.getRandomValues(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">1</span>))[<span class="number">0</span>] &amp; <span class="number">15</span> &gt;&gt; c / <span class="number">4</span>).toString(<span class="number">16</span>)</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// UUIDGenerator() -&gt; '7982fcfe-5721-4632-bede-6000885be57d'</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="validateEmail"><a href="#validateEmail" class="headerlink" title="validateEmail"></a>validateEmail</h3><p>验证是否为邮箱</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validateEmail = <span class="function"><span class="params">str</span> =&gt;</span></span><br><span class="line">  /^(([^&lt;&gt;()\[\]\\.,;:\s@"]+(\.[^&lt;&gt;()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/.test(str);</span><br><span class="line">// validateEmail(mymail@gmail.com) -&gt; true</span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h3 id="validateNumber"><a href="#validateNumber" class="headerlink" title="validateNumber"></a>validateNumber</h3><p>验证是否为数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validateNumber = <span class="function"><span class="params">n</span> =&gt;</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n) &amp;&amp; <span class="built_in">Number</span>(n) == n;</span><br><span class="line"><span class="comment">// validateNumber('10') -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#目录">⬆ back to top</a></p><h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p><em>Icons made by <a href="https://www.flaticon.com/authors/smashicons" target="_blank" rel="noopener">Smashicons</a> from <a href="https://www.flaticon.com/" target="_blank" rel="noopener">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank" rel="noopener">CC 3.0 BY</a>.</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/30-seconds-of-code/1.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;花30秒或者更短的时间就能理解的Javascript代码段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以使用&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS终极之战：Grid vs Flexbox</title>
    <link href="http://blog.catwen.cn/2017/12/12/the-ultimate-css-battle-grid-vs-flexbox/"/>
    <id>http://blog.catwen.cn/2017/12/12/the-ultimate-css-battle-grid-vs-flexbox/</id>
    <published>2017-12-12T02:19:06.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p>在过去几年里，<code>Flexbox</code>已经成了前端最流行的布局框架，这并不奇怪，因为我们可以很方便的用它去对齐元素。</p><p>然而，前端村儿里面还有个叫<code>Grid</code>的小孩儿，他和<code>Flexbox</code>有很多功能相似的地方，有些地方他比<code>Flexbox</code>要好，但有也有不足。</p><p>这也会变成让开发者们纠结的地方，应该用哪个？本文将会在宏观和微观上面对比两个模块。</p><h2 id="一维-vs-二维"><a href="#一维-vs-二维" class="headerlink" title="一维 vs 二维"></a>一维 vs 二维</h2><blockquote><p><code>Flexbox</code>用来做一维布局，<code>Grid</code>用来做二维布局</p></blockquote><p>意思是如果你只在一个方向上布局（比如在header里面放三个button），你需要使用<code>Flexbox</code></p><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/2.png" alt="img"></p><p>他将会比<code>Grid</code>更加灵活，可以用更少的代码去实现并且更加容易维护。</p><p>但是，如果你打算在两个维度上创建一个完整的布局，同时使用行和列，那么你应该使用<code>Grid</code></p><h2 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h2><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/3.png" alt="img"></p><p>在这种情况下，<code>Grid</code>会更加灵活，并且会使你的标签更简单，代码更容易维护。</p><p>你可以结合两者一起使用，在上面的例子中最完美的做法是使用<code>Grid</code>来布局页面，使用<code>Flexbox</code>去对齐header里面的内容。</p><h2 id="内容优先-vs-布局优先"><a href="#内容优先-vs-布局优先" class="headerlink" title="内容优先 vs 布局优先"></a>内容优先 vs 布局优先</h2><p>两者的另一个核心区别是<code>Flexbox</code>以内容为基础，<code>Grid</code>以布局为基础，听起来有些抽象，我们来用一个实际的例子去解释一下。</p><p>我们会用上一段提到的header，他的HTML是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用<code>Flexbox</code>之前，里面的div会堆叠在彼此之上：</p><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/4.png" alt="img"></p><h2 id="Flexbox-header"><a href="#Flexbox-header" class="headerlink" title="Flexbox header"></a>Flexbox header</h2><p>当我们加了<code>display:flex</code>之后，他们会漂亮的在一条线上。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/5.png" alt="img"></p><p>为了让logout button 在最右边，我们简单的给他指定一个margin：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/6.png" alt="img"></p><p>值得注意的是：让元素本身决定他放在哪里，我们除了<code>display: flex</code>之外不添加任何东西。</p><p>这是<code>Flexbox</code>和<code>Grid</code>的核心差别，当我们用<code>Grid</code>来创建这个header时，这个差别会更加明显。</p><blockquote><p>尽管用<code>Grid</code>创建一维的header不太合适，但在本文中去实现它却是一个很好的练习，因为它教会了我们关于<code>Flexbox</code>和<code>Grid</code>的核心区别</p></blockquote><h2 id="Grid-header"><a href="#Grid-header" class="headerlink" title="Grid header"></a>Grid header</h2><p>如果使用<code>Grid</code>会有多种方法。我准备用非常简单的一种去做，我们的<code>Grid</code>有十列，每一列都是一个单位宽度 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">10</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他看起来和<code>Flexbox</code>的解决方案一样</p><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/7.png" alt="img"></p><p>但是，我们可以在上帝视角去看两者有什么不同，我们来使用chrome的审查元素去看一下：</p><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/8.png" alt="img"></p><p>最关键的区别就是，这种方式必须先定义布局的列。从定义列的宽度开始，然后我们才能将元素放在可用的单元格中。</p><blockquote><p>这种方式强迫我们去分割我们的header有多少列</p></blockquote><p>除非我们改变<code>Grid</code>，否则我们会被困死在10列中，但是在<code>Flexbox</code>中我们不会被这个麻烦困扰。</p><p>为了把logout放在最右边，我们会把他放在第十列：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>审查元素时，看起来是这样的：</p><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/9.png" alt="img"></p><p>我们不能简单的添加一个<code>margin-left: auto;</code>因为它已经被放在了第三个单元格中，想要移动它，我们得再找一个单元格把它放进去。</p><h2 id="结合两者"><a href="#结合两者" class="headerlink" title="结合两者"></a>结合两者</h2><p>现在我们看下如如何同时使用<code>Grid</code>和<code>Flexbox</code>来把header合并进我们的布局，我们先来创建布局。</p><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/10.png" alt="img"></p><p>标签如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>MENU<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">12</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">350px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把元素放进<code>Grid</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: span <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面仅需要来布置好header：我们把它从<code>Grid</code>中的元素转换为<code>Flexbox</code>容器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们把logout放在右边：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们有了同时使用<code>Grid</code>和<code>Flexbox</code>的完美布局。下面是这两个容器：</p><p><img src="/images/the-ultimate-css-battle-grid-vs-flexbox/11.png" alt="img"></p><p>所以现在你应该理解了<code>Flexbox</code> 和<code>Grid</code>的差别，也知道了如何结合两者使用。</p><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>本文截止前，全球77%流量的网站支持<code>Grid</code>，这个数字还在不断增长。</p><blockquote><p>我相信2018年将会是<code>Grid</code>的一年，他将获得突破，并将成为前端开发人员的必备技能，就像过去几年的<code>Flexbox</code>一样。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在过去几年里，&lt;code&gt;Flexbox&lt;/code&gt;已经成了前端最流行的布局框架，这并不奇怪，因为我们可以很方便的用它去对齐元素。&lt;/p&gt;
&lt;p&gt;然而，前端村儿里面还有个叫&lt;code&gt;Grid&lt;/code&gt;的小孩儿，他和&lt;code&gt;Flexbox&lt;/code&gt;有很多功能相
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为什么CSS Grid比Bootstrap更适合布局</title>
    <link href="http://blog.catwen.cn/2017/12/05/css-grid-is-better-than-bootstrap/"/>
    <id>http://blog.catwen.cn/2017/12/05/css-grid-is-better-than-bootstrap/</id>
    <published>2017-12-05T12:42:49.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/css-grid-is-better-than-bootstrap/1.png" alt="img"><br><code>CSS Grid</code>是一种全新的创建布局方式，这是有史以来第一个合适的布局系统，并且是浏览器原生的，给我们带来了很多好处。</p><p>当你和当今最流行的<code>Bootstrap</code>框架相比，grid的好处变的尤为清晰，您不仅可以创建在以前在不引入JavaScript的情况下无法实现的布局，而且您的代码将更易于维护和理解。</p><p>本文中我会解释一下为什么。</p><h2 id="标签会更加简洁"><a href="#标签会更加简洁" class="headerlink" title="标签会更加简洁"></a>标签会更加简洁</h2><p>相比<code>Bootstrap</code>，使用grid会使你的HTML更加干净，虽然这不是最重要的好处，但它可能会是你第一个注意到的。</p><p>为了举例说明，我创建了一个布局，以便我们可以比较两个版本所需要的代码。</p><p><img src="/images/css-grid-is-better-than-bootstrap/2.png" alt="img"></p><blockquote><p>注意：我在给出的例子中稍微设计了一下，但是他和我们比较<code>Bootstrap</code>没有任何关系，所以我只保留布局部分的CSS</p></blockquote><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p>先看一下<code>Bootstrap</code>需要创建的标签。<br><img src="/images/css-grid-is-better-than-bootstrap/3.png" alt="img"></p><p>这里有两件事需要注意一下：</p><ul><li>每个row都需要一个<code>&lt;div&gt;</code>标签</li><li>使用了class name来指定布局(<code>col-xs-2</code>)</li></ul><p>随着这种布局的复杂性增长，HTML也是如此。</p><p>如果这是个响应式网站，它会看起来更复杂：<br><img src="/images/css-grid-is-better-than-bootstrap/4.png" alt="img"></p><p>现在我们来看一下用Grid布局：<br><img src="/images/css-grid-is-better-than-bootstrap/5.png" alt="img"></p><p>我可以在这里使用语义化元素，但我还是使用div来和<code>Bootstrap</code>对比。</p><p>显然，grid用来布局看起来更简单，丑陋的类名和每行所需的额外的div标签一去不复返了，简简单单一个container和里面的item。</p><p>与<code>Bootstrap</code>不同的是，随着布局复杂度的增加，Grid布局标签的复杂度将不会增加太多。</p><p><code>Bootstrap</code>示例不需要添加任何CSS，引用一下就可以了。<code>CSS Grid</code>肯定需要添加。具体来说，是这样的：<br><img src="/images/css-grid-is-better-than-bootstrap/6.png" alt="img"></p><p>这可能是一些人赞成<code>Bootstrap</code>的一个论点：你不用关心CSS，只需要在HTML中定义布局。但是，正如你将会明白的那样，当涉及到灵活性的时候，标签和布局之间的耦合会变成一个很大的问题。</p><h2 id="更灵活"><a href="#更灵活" class="headerlink" title="更灵活"></a>更灵活</h2><p>假设您想要根据屏幕大小更改布局。 例如，将菜单拉到最上面一行，在移动设备上查看。</p><p>换句话说，布局从这样：</p><p><img src="/images/css-grid-is-better-than-bootstrap/2.png" alt="img"></p><p>换成这样：</p><p><img src="/images/css-grid-is-better-than-bootstrap/12.png" alt="img"></p><h2 id="CSS-Grid"><a href="#CSS-Grid" class="headerlink" title="CSS Grid"></a>CSS Grid</h2><p>用<code>CSS Grid</code>的话会非常简单，我们只需要添加一个<code>media query</code>，布局就像变魔术一样变成了你想要的。</p><p><img src="/images/css-grid-is-better-than-bootstrap/7.png" alt="img"></p><p>你可以这样重新排列布局，不用担心HTML标签编写的顺序，这对开发人员和设计师都是很大的一个好处！</p><h2 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h2><p>如果想在<code>Bootstrap</code>中做同样的事情，就必须得修改HTML了，需要调整标签的顺序。</p><p><img src="/images/css-grid-is-better-than-bootstrap/8.png" alt="img"></p><p>这个需求仅仅使用media query是远远不够的，你还得使用JavaScript。</p><p>这个例子是我体会到的grid最大的好处</p><h2 id="不再限死12列"><a href="#不再限死12列" class="headerlink" title="不再限死12列"></a>不再限死12列</h2><p>这个不是一个很大的问题，但是这个问题也困扰过我多次，因为<code>Bootstrap</code>的grid系统分为了12列，如果你想要一个5列的布局就会纠结，或是7列、9列、任何不会合为12列的。</p><p><code>CSS Grid</code>就没有任何限制，你可以让grid正好有你想要的数量。这是一个7列的grid：</p><p><img src="/images/css-grid-is-better-than-bootstrap/9.png" alt="img"></p><p>通过设置<code>grid-template-columns : repeat(7, 1fr)</code>实现，就像这样：</p><p><img src="/images/css-grid-is-better-than-bootstrap/10.png" alt="img"></p><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>当然也必须讨论一下浏览器支持，在撰写本文的时候，全球75%的网站流量支持<code>CSS Grid</code></p><p><img src="/images/css-grid-is-better-than-bootstrap/11.png" alt="img"></p><blockquote><p><code>CSS Grid</code>是一个布局模块，它允许我们改变文档的布局，而不会干扰标签顺序。换句话说，CSS网格是一个纯粹的可视化工具，使用得当，对文档内容的表达应该没有影响。所以：在旧的浏览器中缺乏对<code>CSS Grid</code>的支持不影响访问者的体验，只是让体验不同。</p></blockquote><p><a href="https://hackernoon.com/how-css-grid-beats-bootstrap-85d5881cf163" target="_blank">原文链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/css-grid-is-better-than-bootstrap/1.png&quot; alt=&quot;img&quot;&gt;&lt;br&gt;&lt;code&gt;CSS Grid&lt;/code&gt;是一种全新的创建布局方式，这是有史以来第一个合适的布局系统，并且是浏览器原生的，给我们
      
    
    </summary>
    
    
      <category term="css,grid,bootstrap" scheme="http://blog.catwen.cn/tags/css-grid-bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab CI，你值得拥有</title>
    <link href="http://blog.catwen.cn/2017/08/05/gitlab-ci-configuration/"/>
    <id>http://blog.catwen.cn/2017/08/05/gitlab-ci-configuration/</id>
    <published>2017-08-05T14:46:20.000Z</published>
    <updated>2021-11-27T15:51:08.589Z</updated>
    
    <content type="html"><![CDATA[<p>先唠叨一下<code>持续集成</code>的概念和为什么要去用它，如果有一定了解的话可以跳过直接去看正文</p><p><a href="https://zh.wikipedia.org/wiki/%E6%8C%81%E7%BA%8C%E6%95%B4%E5%90%88" target="_blank" rel="noopener">持续集成(Continuous integration简称CI)</a>是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p><p>上面那段话怎么去理解呢？先回想一下我们产品开发的基本过程，传统开发模式一般是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开发 --&gt; 编译 --&gt; 部署 --&gt; 测试 --&gt; 上线</span><br></pre></td></tr></table></figure><p>上面流程再细分就变成了：</p><ul><li>分配任务给开发人员</li><li>开发</li><li>部署到测试环境</li><li>测试团队进行测试</li><li>出现bug，记录在bug列表</li><li>分配bug给开发人员</li><li>重复 开发 -&gt; 部署 -&gt; 测试</li><li>直到所有bug都解决，部署到生产环境</li></ul><p>上面的开发过程中有很多问题，又是我们大部分人都在面临的：</p><ul><li>大量重复劳动</li><li>Bug总是在最后才发现</li><li>越到项目后期，问题越难解决</li><li>程序经常需要变更（无限循环开发、编译、测试、部署）</li><li>交付时机无法保障</li></ul><p>所以我们需要持续集成去尽早发现我们的问题，尽早的去解决，并且减少我们开发过程中各个环节的时间，提升我们的开发效率，持续集成的工具有很多，比如：Travis、Jenkins、Codeship、Strider还有今天我们要介绍的GitLab CI</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><blockquote><p>一、介绍<br>二、架构<br>三、安装<br>四、配置</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>GitLab CI是一套配合GitLab使用的持续集成系统，从 GitLab 8.0 开始，GitLab CI 就已经集成在 GitLab 中。工作流一般是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分支变更 --&gt; 自动编译 --&gt; 自动测试 --&gt; 自动部署</span><br></pre></td></tr></table></figure><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>一张来自gitlab官方的架构图：</p><p><img src="https://about.gitlab.com/images/ci/arch-1.jpg" alt="gitlab-ci架构"></p><p>主要有两部分组成：</p><ul><li>Gitlab Server</li><li>Runner Server</li></ul><p>Gitlab Server既可以是官方的 <a href="https://gitlab.com" target="_blank" rel="noopener">gitlab</a>，也可以是你自己部署，8.0以上已经集成Gitlab CI。<br>Runner Server 既可以在vps上运行，也可以在你自己的电脑上运行。</p><p><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">Runner</a>会运行你项目中<code>.gitlab-ci.yml</code>定义的job并且反馈给Gitlab Server。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>现在我们使用官方的<a href="https://gitlab.com" target="_blank" rel="noopener">gitlab</a>作为我们的Gitlab Server，下面我们需要安装Gitlab Runner来运行项目中<code>.gitlab-ci.yml</code>定义的job</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl --output /usr/<span class="built_in">local</span>/bin/gitlab-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-darwin-amd64</span><br></pre></td></tr></table></figure><p>添加可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/gitlab-runner</span><br></pre></td></tr></table></figure><p>安装完成之后我们需要注册gitlab runner来绑定我们的gitlab项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure><p>接下来会有几个步骤去完成我们的注册，值得注意的是我们要找到gitlab server url和项目token并设置，参考下图的<code>How to setup  specific Runner for a new project</code>（<code>Setting -&gt; Pipelines</code>）。runner支持的执行方式有ssh, docker machine, docker-ssh machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell，我使用的是ssh</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>安装完成之后我们去Gitlab选择一个项目 Setting -&gt; Pipelines:<br><img src="/images/gitlab-ci-configuration/1.png" alt="pipelines"><br>我们会看到两种Runner：</p><ul><li>Specific Runners</li><li>Shared Runners</li></ul><p>Specific Runners是我们自己创建的，可以针对我们自己的项目，Shared Runners是Gitlab管理员创建的，针对所有的Gitlab项目。可以看到可用的Specific Runners下面有个<code>17c17f05</code>，这个就是我们刚才注册的Runner。</p><p>点击<code>Enable for this project</code>启用，并且<code>Disable shared Runners</code>禁用Shared Runners。</p><p>现在Runner已经和我们的项目绑定好了，下面就是需要定义我们的工作流和脚本了。</p><p>手动创建一个<code>.gitlab-ci.yml</code>文件或者在项目首页点击<code>Set up CI</code>，下面是我在用的一个Nodejs配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cp</span> <span class="string">.env.example</span> <span class="string">.env</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">pm2</span> <span class="string">delete</span> <span class="string">api</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">pm2</span> <span class="string">start</span> <span class="string">dist/index.js</span> <span class="string">--name</span> <span class="string">api</span></span><br></pre></td></tr></table></figure><p>配置完成，当分支变更Gitlab就会通知我们注册的Runner开始干活，首先runner会在我们的vps上签出变更的分支，然后这个例子的pipeline分为三个阶段：</p><ul><li>build</li><li>test</li><li>deploy</li></ul><p>任何一个阶段出错，都不会继续往下进行，详细的配置参考：<a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">.gitlab-ci.yml </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先唠叨一下&lt;code&gt;持续集成&lt;/code&gt;的概念和为什么要去用它，如果有一定了解的话可以跳过直接去看正文&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8C%81%E7%BA%8C%E6%95%B4%E5%90%88&quot;
      
    
    </summary>
    
    
      <category term="gialab" scheme="http://blog.catwen.cn/tags/gialab/"/>
    
  </entry>
  
</feed>
